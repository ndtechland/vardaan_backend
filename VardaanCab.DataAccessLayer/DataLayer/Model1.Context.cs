//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VardaanCab.DataAccessLayer.DataLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Vardaan_AdminEntities : DbContext
    {
        public Vardaan_AdminEntities()
            : base("name=Vardaan_AdminEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<Cab> Cabs { get; set; }
        public virtual DbSet<CabCategory> CabCategories { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<CityMaster> CityMasters { get; set; }
        public virtual DbSet<ClientPackage> ClientPackages { get; set; }
        public virtual DbSet<ClientUser> ClientUsers { get; set; }
        public virtual DbSet<ClientUserBookingMapping> ClientUserBookingMappings { get; set; }
        public virtual DbSet<ClientUserMapping> ClientUserMappings { get; set; }
        public virtual DbSet<CorporateBill> CorporateBills { get; set; }
        public virtual DbSet<CorporateInvoiceFile> CorporateInvoiceFiles { get; set; }
        public virtual DbSet<CorporateInvoiceFileDetail> CorporateInvoiceFileDetails { get; set; }
        public virtual DbSet<CorporatePackage> CorporatePackages { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerUserMapping> CustomerUserMappings { get; set; }
        public virtual DbSet<Driver> Drivers { get; set; }
        public virtual DbSet<DriverLeave> DriverLeaves { get; set; }
        public virtual DbSet<LoginHistory> LoginHistories { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<MonthlyPackage> MonthlyPackages { get; set; }
        public virtual DbSet<MonthlyPackageBill> MonthlyPackageBills { get; set; }
        public virtual DbSet<MonthlyPackageEntry> MonthlyPackageEntries { get; set; }
        public virtual DbSet<MonthlyPackageMaster> MonthlyPackageMasters { get; set; }
        public virtual DbSet<MonthlyPackageRoute> MonthlyPackageRoutes { get; set; }
        public virtual DbSet<MonthlyPackageRouteBill> MonthlyPackageRouteBills { get; set; }
        public virtual DbSet<MonthlyPackageRouteEntry> MonthlyPackageRouteEntries { get; set; }
        public virtual DbSet<MonthlyPackageRouteMaster> MonthlyPackageRouteMasters { get; set; }
        public virtual DbSet<MopMaster> MopMasters { get; set; }
        public virtual DbSet<MultipleBookingFile> MultipleBookingFiles { get; set; }
        public virtual DbSet<MultipleBookingFileDetail> MultipleBookingFileDetails { get; set; }
        public virtual DbSet<NrgPackage> NrgPackages { get; set; }
        public virtual DbSet<PackageType> PackageTypes { get; set; }
        public virtual DbSet<RentalType> RentalTypes { get; set; }
        public virtual DbSet<SoftwareLink> SoftwareLinks { get; set; }
        public virtual DbSet<StateMaster> StateMasters { get; set; }
        public virtual DbSet<StateWiseGSTIN> StateWiseGSTINs { get; set; }
        public virtual DbSet<Tax> Taxes { get; set; }
        public virtual DbSet<tempUserBooking> tempUserBookings { get; set; }
        public virtual DbSet<User_SoftwareLink> User_SoftwareLink { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
        public virtual DbSet<VehicleModel> VehicleModels { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<VendorBill> VendorBills { get; set; }
        public virtual DbSet<VendorPackage> VendorPackages { get; set; }
        public virtual DbSet<VendorPersonalPackage> VendorPersonalPackages { get; set; }
        public virtual DbSet<booking_backup11feb> booking_backup11feb { get; set; }
        public virtual DbSet<bookingCab1475> bookingCab1475 { get; set; }
        public virtual DbSet<cab1475> cab1475 { get; set; }
        public virtual DbSet<log_2022> log_2022 { get; set; }
        public virtual DbSet<SoftwareLink_15052023> SoftwareLink_15052023 { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<AreaMaster> AreaMasters { get; set; }
        public virtual DbSet<DaysName> DaysNames { get; set; }
        public virtual DbSet<BannerMaster> BannerMasters { get; set; }
        public virtual DbSet<EmployeeDestinationArea> EmployeeDestinationAreas { get; set; }
        public virtual DbSet<EmployeeRegistrationType> EmployeeRegistrationTypes { get; set; }
        public virtual DbSet<CompanyZoneHomeRoute> CompanyZoneHomeRoutes { get; set; }
        public virtual DbSet<CompanyZone> CompanyZones { get; set; }
        public virtual DbSet<ShiftMaster> ShiftMasters { get; set; }
        public virtual DbSet<TripMaster> TripMasters { get; set; }
        public virtual DbSet<TripType> TripTypes { get; set; }
        public virtual DbSet<EmployeeRequest> EmployeeRequests { get; set; }
        public virtual DbSet<DepartmentMaster> DepartmentMasters { get; set; }
        public virtual DbSet<FeedBackEmployee> FeedBackEmployees { get; set; }
        public virtual DbSet<HelpEmployee> HelpEmployees { get; set; }
        public virtual DbSet<Support> Supports { get; set; }
        public virtual DbSet<Escort> Escorts { get; set; }
        public virtual DbSet<EmployeeMobileAppSetting> EmployeeMobileAppSettings { get; set; }
        public virtual DbSet<AccessType> AccessTypes { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
    
        public virtual ObjectResult<Nullable<int>> checkOneCompanyBookingSelected(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> cityId, Nullable<int> routeNo)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("checkOneCompanyBookingSelected", isNrgParameter, termParameter, sDateParameter, eDateParameter, cityIdParameter, routeNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> checkOneCompanyBookingSelectedByPtype(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> cityId, Nullable<int> routeNo, Nullable<int> pType)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            var pTypeParameter = pType.HasValue ?
                new ObjectParameter("pType", pType) :
                new ObjectParameter("pType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("checkOneCompanyBookingSelectedByPtype", isNrgParameter, termParameter, sDateParameter, eDateParameter, cityIdParameter, routeNoParameter, pTypeParameter);
        }
    
        public virtual int CreateInvoiceUsingTempData(Nullable<int> copInvId, string username, string sessId)
        {
            var copInvIdParameter = copInvId.HasValue ?
                new ObjectParameter("CopInvId", copInvId) :
                new ObjectParameter("CopInvId", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var sessIdParameter = sessId != null ?
                new ObjectParameter("sessId", sessId) :
                new ObjectParameter("sessId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateInvoiceUsingTempData", copInvIdParameter, usernameParameter, sessIdParameter);
        }
    
        public virtual ObjectResult<GetAllBooking_Result> GetAllBooking(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> userid)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllBooking_Result>("GetAllBooking", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, useridParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetAllBookingCount(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> userid)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetAllBookingCount", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, useridParameter);
        }
    
        public virtual ObjectResult<getAllParents_Result> getAllParents(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllParents_Result>("getAllParents", categoryIdParameter);
        }
    
        public virtual ObjectResult<getAutoGenratedInvNo_Result> getAutoGenratedInvNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAutoGenratedInvNo_Result>("getAutoGenratedInvNo");
        }
    
        public virtual ObjectResult<string> getAutoInvNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getAutoInvNo");
        }
    
        public virtual ObjectResult<Nullable<long>> getAutoProformaNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("getAutoProformaNo");
        }
    
        public virtual ObjectResult<GetBooking_Result> GetBooking(Nullable<int> bookingStatus, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport)
        {
            var bookingStatusParameter = bookingStatus.HasValue ?
                new ObjectParameter("bookingStatus", bookingStatus) :
                new ObjectParameter("bookingStatus", typeof(int));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBooking_Result>("GetBooking", bookingStatusParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter);
        }
    
        public virtual ObjectResult<GetBookingByClintUser_Result> GetBookingByClintUser(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> clintUID)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var clintUIDParameter = clintUID.HasValue ?
                new ObjectParameter("clintUID", clintUID) :
                new ObjectParameter("clintUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBookingByClintUser_Result>("GetBookingByClintUser", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, clintUIDParameter);
        }
    
        public virtual ObjectResult<GetBookingByPendBookCategory_Result> GetBookingByPendBookCategory(Nullable<int> bookingStatus, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> pbookingCat, Nullable<int> userid)
        {
            var bookingStatusParameter = bookingStatus.HasValue ?
                new ObjectParameter("bookingStatus", bookingStatus) :
                new ObjectParameter("bookingStatus", typeof(int));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var pbookingCatParameter = pbookingCat.HasValue ?
                new ObjectParameter("pbookingCat", pbookingCat) :
                new ObjectParameter("pbookingCat", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBookingByPendBookCategory_Result>("GetBookingByPendBookCategory", bookingStatusParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, pbookingCatParameter, useridParameter);
        }
    
        public virtual ObjectResult<GetBookingCartDataTemp_Result> GetBookingCartDataTemp(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> cityId, Nullable<int> routeNo, string username, string sessId, Nullable<int> pType)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var sessIdParameter = sessId != null ?
                new ObjectParameter("sessId", sessId) :
                new ObjectParameter("sessId", typeof(string));
    
            var pTypeParameter = pType.HasValue ?
                new ObjectParameter("pType", pType) :
                new ObjectParameter("pType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBookingCartDataTemp_Result>("GetBookingCartDataTemp", isNrgParameter, termParameter, sDateParameter, eDateParameter, cityIdParameter, routeNoParameter, usernameParameter, sessIdParameter, pTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetBookingCount(Nullable<int> bookingStatus, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport)
        {
            var bookingStatusParameter = bookingStatus.HasValue ?
                new ObjectParameter("bookingStatus", bookingStatus) :
                new ObjectParameter("bookingStatus", typeof(int));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetBookingCount", bookingStatusParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetBookingCountByClientUser(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> clintUID)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var clintUIDParameter = clintUID.HasValue ?
                new ObjectParameter("clintUID", clintUID) :
                new ObjectParameter("clintUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetBookingCountByClientUser", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, clintUIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetBookingCountByPendBookCategory(Nullable<int> bookingStatus, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> pbookingCat, Nullable<int> userid)
        {
            var bookingStatusParameter = bookingStatus.HasValue ?
                new ObjectParameter("bookingStatus", bookingStatus) :
                new ObjectParameter("bookingStatus", typeof(int));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var pbookingCatParameter = pbookingCat.HasValue ?
                new ObjectParameter("pbookingCat", pbookingCat) :
                new ObjectParameter("pbookingCat", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetBookingCountByPendBookCategory", bookingStatusParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, pbookingCatParameter, useridParameter);
        }
    
        public virtual ObjectResult<GetCorporateDs_Result> GetCorporateDs(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCorporateDs_Result>("GetCorporateDs", isNrgParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter);
        }
    
        public virtual ObjectResult<GetCorporateDsByPType_Result> GetCorporateDsByPType(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<int> pType, string bType, Nullable<bool> isExport, Nullable<int> cityId, Nullable<int> routeNo)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var pTypeParameter = pType.HasValue ?
                new ObjectParameter("pType", pType) :
                new ObjectParameter("pType", typeof(int));
    
            var bTypeParameter = bType != null ?
                new ObjectParameter("bType", bType) :
                new ObjectParameter("bType", typeof(string));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCorporateDsByPType_Result>("GetCorporateDsByPType", isNrgParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, pTypeParameter, bTypeParameter, isExportParameter, cityIdParameter, routeNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCorporateDsCount(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCorporateDsCount", isNrgParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCorporateDsCountByPType(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<int> pType, string bType, Nullable<bool> isExport, Nullable<int> cityId, Nullable<int> routeNo)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var pTypeParameter = pType.HasValue ?
                new ObjectParameter("pType", pType) :
                new ObjectParameter("pType", typeof(int));
    
            var bTypeParameter = bType != null ?
                new ObjectParameter("bType", bType) :
                new ObjectParameter("bType", typeof(string));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCorporateDsCountByPType", isNrgParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, pTypeParameter, bTypeParameter, isExportParameter, cityIdParameter, routeNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCorporateDsCountNew(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> cityId, Nullable<int> routeNo)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCorporateDsCountNew", isNrgParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, cityIdParameter, routeNoParameter);
        }
    
        public virtual ObjectResult<GetCorporateDsEdit_Result> GetCorporateDsEdit(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<int> tInvID)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var tInvIDParameter = tInvID.HasValue ?
                new ObjectParameter("TInvID", tInvID) :
                new ObjectParameter("TInvID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCorporateDsEdit_Result>("GetCorporateDsEdit", isNrgParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, tInvIDParameter);
        }
    
        public virtual ObjectResult<GetCorporateDsNew_Result> GetCorporateDsNew(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> cityId, Nullable<int> routeNo)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCorporateDsNew_Result>("GetCorporateDsNew", isNrgParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, cityIdParameter, routeNoParameter);
        }
    
        public virtual ObjectResult<GetMISVyTaxInvNo_Result> GetMISVyTaxInvNo(Nullable<int> taxInvId, Nullable<bool> isExport)
        {
            var taxInvIdParameter = taxInvId.HasValue ?
                new ObjectParameter("taxInvId", taxInvId) :
                new ObjectParameter("taxInvId", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMISVyTaxInvNo_Result>("GetMISVyTaxInvNo", taxInvIdParameter, isExportParameter);
        }
    
        public virtual ObjectResult<GetPendingBookingByClintUser_Result> GetPendingBookingByClintUser(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> clintUID)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var clintUIDParameter = clintUID.HasValue ?
                new ObjectParameter("clintUID", clintUID) :
                new ObjectParameter("clintUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPendingBookingByClintUser_Result>("GetPendingBookingByClintUser", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, clintUIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetPendingBookingCountByClientUser(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> clintUID)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var clintUIDParameter = clintUID.HasValue ?
                new ObjectParameter("clintUID", clintUID) :
                new ObjectParameter("clintUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetPendingBookingCountByClientUser", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, clintUIDParameter);
        }
    
        public virtual ObjectResult<GetUnbilledBooking_Result> GetUnbilledBooking(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUnbilledBooking_Result>("GetUnbilledBooking", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter);
        }
    
        public virtual ObjectResult<GetUnbilledBookingByPType_Result> GetUnbilledBookingByPType(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<int> pType, string bType, Nullable<bool> isExport)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var pTypeParameter = pType.HasValue ?
                new ObjectParameter("pType", pType) :
                new ObjectParameter("pType", typeof(int));
    
            var bTypeParameter = bType != null ?
                new ObjectParameter("bType", bType) :
                new ObjectParameter("bType", typeof(string));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUnbilledBookingByPType_Result>("GetUnbilledBookingByPType", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, pTypeParameter, bTypeParameter, isExportParameter);
        }
    
        public virtual ObjectResult<GetUnbilledBookingByPTypeNew_Result> GetUnbilledBookingByPTypeNew(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<int> pType, string bType, Nullable<bool> isExport, Nullable<int> routeNo)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var pTypeParameter = pType.HasValue ?
                new ObjectParameter("pType", pType) :
                new ObjectParameter("pType", typeof(int));
    
            var bTypeParameter = bType != null ?
                new ObjectParameter("bType", bType) :
                new ObjectParameter("bType", typeof(string));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUnbilledBookingByPTypeNew_Result>("GetUnbilledBookingByPTypeNew", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, pTypeParameter, bTypeParameter, isExportParameter, routeNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetUnbilledBookingCount(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetUnbilledBookingCount", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetUnbilledBookingCountByPType(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<int> pType, string bType, Nullable<bool> isExport)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var pTypeParameter = pType.HasValue ?
                new ObjectParameter("pType", pType) :
                new ObjectParameter("pType", typeof(int));
    
            var bTypeParameter = bType != null ?
                new ObjectParameter("bType", bType) :
                new ObjectParameter("bType", typeof(string));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetUnbilledBookingCountByPType", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, pTypeParameter, bTypeParameter, isExportParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetUnbilledBookingCountByPTypeNew(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<int> pType, string bType, Nullable<bool> isExport, Nullable<int> routeNo)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var pTypeParameter = pType.HasValue ?
                new ObjectParameter("pType", pType) :
                new ObjectParameter("pType", typeof(int));
    
            var bTypeParameter = bType != null ?
                new ObjectParameter("bType", bType) :
                new ObjectParameter("bType", typeof(string));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetUnbilledBookingCountByPTypeNew", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, pTypeParameter, bTypeParameter, isExportParameter, routeNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetUnbilledBookingCountNew(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> routeNo)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetUnbilledBookingCountNew", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, routeNoParameter);
        }
    
        public virtual ObjectResult<GetUnbilledBookingNew_Result> GetUnbilledBookingNew(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> routeNo)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUnbilledBookingNew_Result>("GetUnbilledBookingNew", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, routeNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> getWorkingDayOfMonth(Nullable<System.DateTime> workingDate)
        {
            var workingDateParameter = workingDate.HasValue ?
                new ObjectParameter("workingDate", workingDate) :
                new ObjectParameter("workingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getWorkingDayOfMonth", workingDateParameter);
        }
    
        public virtual ObjectResult<uspTaxInvoicelist_Result> uspTaxInvoicelist(Nullable<int> taxInvId)
        {
            var taxInvIdParameter = taxInvId.HasValue ?
                new ObjectParameter("taxInvId", taxInvId) :
                new ObjectParameter("taxInvId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTaxInvoicelist_Result>("uspTaxInvoicelist", taxInvIdParameter);
        }
    
        public virtual ObjectResult<uspTaxInvoicelistbyClintUser_Result> uspTaxInvoicelistbyClintUser(Nullable<int> taxInvId, Nullable<int> clintUID)
        {
            var taxInvIdParameter = taxInvId.HasValue ?
                new ObjectParameter("taxInvId", taxInvId) :
                new ObjectParameter("taxInvId", typeof(int));
    
            var clintUIDParameter = clintUID.HasValue ?
                new ObjectParameter("clintUID", clintUID) :
                new ObjectParameter("clintUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTaxInvoicelistbyClintUser_Result>("uspTaxInvoicelistbyClintUser", taxInvIdParameter, clintUIDParameter);
        }
    
        public virtual ObjectResult<getbookingHeadCount_Result> getbookingHeadCount(Nullable<int> finyear)
        {
            var finyearParameter = finyear.HasValue ?
                new ObjectParameter("finyear", finyear) :
                new ObjectParameter("finyear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getbookingHeadCount_Result>("getbookingHeadCount", finyearParameter);
        }
    
        public virtual ObjectResult<getCloseBookingDatabyMonth_Result> getCloseBookingDatabyMonth()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getCloseBookingDatabyMonth_Result>("getCloseBookingDatabyMonth");
        }
    
        public virtual ObjectResult<GetCorporateDsEdit1_Result> GetCorporateDsEdit1(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<int> tInvID)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var tInvIDParameter = tInvID.HasValue ?
                new ObjectParameter("TInvID", tInvID) :
                new ObjectParameter("TInvID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCorporateDsEdit1_Result>("GetCorporateDsEdit1", isNrgParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, tInvIDParameter);
        }
    
        public virtual int ManageEmployee(string action, Nullable<int> id, Nullable<int> company_Id, string company_location, string employee_Id, string employee_First_Name, string employee_Middle_Name, string employee_Last_Name, string gender, string mobileNumber, string email, Nullable<int> stateId, Nullable<int> cityId, Nullable<int> pincode, string employeeCurrentAddress, string loginUserName, string weekOff, string employeeGeoCode, string employeeBusinessUnit, string employeeDepartment, string employeeProjectName, string reportingManager, Nullable<int> primaryFacilityZone, Nullable<int> homeRouteName, Nullable<int> employeeDestinationArea, Nullable<int> employeeRegistrationType, Nullable<bool> isActive, string password, Nullable<bool> isFirst)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var company_IdParameter = company_Id.HasValue ?
                new ObjectParameter("Company_Id", company_Id) :
                new ObjectParameter("Company_Id", typeof(int));
    
            var company_locationParameter = company_location != null ?
                new ObjectParameter("Company_location", company_location) :
                new ObjectParameter("Company_location", typeof(string));
    
            var employee_IdParameter = employee_Id != null ?
                new ObjectParameter("Employee_Id", employee_Id) :
                new ObjectParameter("Employee_Id", typeof(string));
    
            var employee_First_NameParameter = employee_First_Name != null ?
                new ObjectParameter("Employee_First_Name", employee_First_Name) :
                new ObjectParameter("Employee_First_Name", typeof(string));
    
            var employee_Middle_NameParameter = employee_Middle_Name != null ?
                new ObjectParameter("Employee_Middle_Name", employee_Middle_Name) :
                new ObjectParameter("Employee_Middle_Name", typeof(string));
    
            var employee_Last_NameParameter = employee_Last_Name != null ?
                new ObjectParameter("Employee_Last_Name", employee_Last_Name) :
                new ObjectParameter("Employee_Last_Name", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var pincodeParameter = pincode.HasValue ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(int));
    
            var employeeCurrentAddressParameter = employeeCurrentAddress != null ?
                new ObjectParameter("EmployeeCurrentAddress", employeeCurrentAddress) :
                new ObjectParameter("EmployeeCurrentAddress", typeof(string));
    
            var loginUserNameParameter = loginUserName != null ?
                new ObjectParameter("LoginUserName", loginUserName) :
                new ObjectParameter("LoginUserName", typeof(string));
    
            var weekOffParameter = weekOff != null ?
                new ObjectParameter("WeekOff", weekOff) :
                new ObjectParameter("WeekOff", typeof(string));
    
            var employeeGeoCodeParameter = employeeGeoCode != null ?
                new ObjectParameter("EmployeeGeoCode", employeeGeoCode) :
                new ObjectParameter("EmployeeGeoCode", typeof(string));
    
            var employeeBusinessUnitParameter = employeeBusinessUnit != null ?
                new ObjectParameter("EmployeeBusinessUnit", employeeBusinessUnit) :
                new ObjectParameter("EmployeeBusinessUnit", typeof(string));
    
            var employeeDepartmentParameter = employeeDepartment != null ?
                new ObjectParameter("EmployeeDepartment", employeeDepartment) :
                new ObjectParameter("EmployeeDepartment", typeof(string));
    
            var employeeProjectNameParameter = employeeProjectName != null ?
                new ObjectParameter("EmployeeProjectName", employeeProjectName) :
                new ObjectParameter("EmployeeProjectName", typeof(string));
    
            var reportingManagerParameter = reportingManager != null ?
                new ObjectParameter("ReportingManager", reportingManager) :
                new ObjectParameter("ReportingManager", typeof(string));
    
            var primaryFacilityZoneParameter = primaryFacilityZone.HasValue ?
                new ObjectParameter("PrimaryFacilityZone", primaryFacilityZone) :
                new ObjectParameter("PrimaryFacilityZone", typeof(int));
    
            var homeRouteNameParameter = homeRouteName.HasValue ?
                new ObjectParameter("HomeRouteName", homeRouteName) :
                new ObjectParameter("HomeRouteName", typeof(int));
    
            var employeeDestinationAreaParameter = employeeDestinationArea.HasValue ?
                new ObjectParameter("EmployeeDestinationArea", employeeDestinationArea) :
                new ObjectParameter("EmployeeDestinationArea", typeof(int));
    
            var employeeRegistrationTypeParameter = employeeRegistrationType.HasValue ?
                new ObjectParameter("EmployeeRegistrationType", employeeRegistrationType) :
                new ObjectParameter("EmployeeRegistrationType", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var isFirstParameter = isFirst.HasValue ?
                new ObjectParameter("IsFirst", isFirst) :
                new ObjectParameter("IsFirst", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ManageEmployee", actionParameter, idParameter, company_IdParameter, company_locationParameter, employee_IdParameter, employee_First_NameParameter, employee_Middle_NameParameter, employee_Last_NameParameter, genderParameter, mobileNumberParameter, emailParameter, stateIdParameter, cityIdParameter, pincodeParameter, employeeCurrentAddressParameter, loginUserNameParameter, weekOffParameter, employeeGeoCodeParameter, employeeBusinessUnitParameter, employeeDepartmentParameter, employeeProjectNameParameter, reportingManagerParameter, primaryFacilityZoneParameter, homeRouteNameParameter, employeeDestinationAreaParameter, employeeRegistrationTypeParameter, isActiveParameter, passwordParameter, isFirstParameter);
        }
    }
}
