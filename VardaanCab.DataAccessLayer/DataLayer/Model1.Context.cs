//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VardaanCab.DataAccessLayer.DataLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Vardaan_AdminEntities : DbContext
    {
        public Vardaan_AdminEntities()
            : base("name=Vardaan_AdminEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<Cab> Cabs { get; set; }
        public virtual DbSet<CabCategory> CabCategories { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<CityMaster> CityMasters { get; set; }
        public virtual DbSet<ClientPackage> ClientPackages { get; set; }
        public virtual DbSet<ClientUser> ClientUsers { get; set; }
        public virtual DbSet<ClientUserBookingMapping> ClientUserBookingMappings { get; set; }
        public virtual DbSet<ClientUserMapping> ClientUserMappings { get; set; }
        public virtual DbSet<CorporateBill> CorporateBills { get; set; }
        public virtual DbSet<CorporateInvoiceFile> CorporateInvoiceFiles { get; set; }
        public virtual DbSet<CorporateInvoiceFileDetail> CorporateInvoiceFileDetails { get; set; }
        public virtual DbSet<CorporatePackage> CorporatePackages { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerUserMapping> CustomerUserMappings { get; set; }
        public virtual DbSet<DriverLeave> DriverLeaves { get; set; }
        public virtual DbSet<LoginHistory> LoginHistories { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<MonthlyPackage> MonthlyPackages { get; set; }
        public virtual DbSet<MonthlyPackageBill> MonthlyPackageBills { get; set; }
        public virtual DbSet<MonthlyPackageEntry> MonthlyPackageEntries { get; set; }
        public virtual DbSet<MonthlyPackageMaster> MonthlyPackageMasters { get; set; }
        public virtual DbSet<MonthlyPackageRoute> MonthlyPackageRoutes { get; set; }
        public virtual DbSet<MonthlyPackageRouteBill> MonthlyPackageRouteBills { get; set; }
        public virtual DbSet<MonthlyPackageRouteEntry> MonthlyPackageRouteEntries { get; set; }
        public virtual DbSet<MonthlyPackageRouteMaster> MonthlyPackageRouteMasters { get; set; }
        public virtual DbSet<MopMaster> MopMasters { get; set; }
        public virtual DbSet<MultipleBookingFile> MultipleBookingFiles { get; set; }
        public virtual DbSet<MultipleBookingFileDetail> MultipleBookingFileDetails { get; set; }
        public virtual DbSet<NrgPackage> NrgPackages { get; set; }
        public virtual DbSet<PackageType> PackageTypes { get; set; }
        public virtual DbSet<RentalType> RentalTypes { get; set; }
        public virtual DbSet<SoftwareLink> SoftwareLinks { get; set; }
        public virtual DbSet<StateMaster> StateMasters { get; set; }
        public virtual DbSet<StateWiseGSTIN> StateWiseGSTINs { get; set; }
        public virtual DbSet<Tax> Taxes { get; set; }
        public virtual DbSet<tempUserBooking> tempUserBookings { get; set; }
        public virtual DbSet<User_SoftwareLink> User_SoftwareLink { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
        public virtual DbSet<VehicleModel> VehicleModels { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<VendorBill> VendorBills { get; set; }
        public virtual DbSet<VendorPackage> VendorPackages { get; set; }
        public virtual DbSet<VendorPersonalPackage> VendorPersonalPackages { get; set; }
        public virtual DbSet<booking_backup11feb> booking_backup11feb { get; set; }
        public virtual DbSet<bookingCab1475> bookingCab1475 { get; set; }
        public virtual DbSet<cab1475> cab1475 { get; set; }
        public virtual DbSet<log_2022> log_2022 { get; set; }
        public virtual DbSet<SoftwareLink_15052023> SoftwareLink_15052023 { get; set; }
        public virtual DbSet<AreaMaster> AreaMasters { get; set; }
        public virtual DbSet<DaysName> DaysNames { get; set; }
        public virtual DbSet<BannerMaster> BannerMasters { get; set; }
        public virtual DbSet<EmployeeDestinationArea> EmployeeDestinationAreas { get; set; }
        public virtual DbSet<EmployeeRegistrationType> EmployeeRegistrationTypes { get; set; }
        public virtual DbSet<CompanyZoneHomeRoute> CompanyZoneHomeRoutes { get; set; }
        public virtual DbSet<ShiftMaster> ShiftMasters { get; set; }
        public virtual DbSet<TripMaster> TripMasters { get; set; }
        public virtual DbSet<TripType> TripTypes { get; set; }
        public virtual DbSet<EmployeeRequest> EmployeeRequests { get; set; }
        public virtual DbSet<DepartmentMaster> DepartmentMasters { get; set; }
        public virtual DbSet<FeedBackEmployee> FeedBackEmployees { get; set; }
        public virtual DbSet<HelpEmployee> HelpEmployees { get; set; }
        public virtual DbSet<Support> Supports { get; set; }
        public virtual DbSet<Escort> Escorts { get; set; }
        public virtual DbSet<EmployeeMobileAppSetting> EmployeeMobileAppSettings { get; set; }
        public virtual DbSet<AccessType> AccessTypes { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<AccessAssign> AccessAssigns { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<AllRoute> AllRoutes { get; set; }
        public virtual DbSet<Routing> Routings { get; set; }
        public virtual DbSet<DriverLoginHistory> DriverLoginHistories { get; set; }
        public virtual DbSet<DriverDeviceId> DriverDeviceIds { get; set; }
        public virtual DbSet<Driver> Drivers { get; set; }
        public virtual DbSet<VehicleCapacity> VehicleCapacities { get; set; }
        public virtual DbSet<CompanyZone> CompanyZones { get; set; }
        public virtual DbSet<DriverCheckoutRemark> DriverCheckoutRemarks { get; set; }
        public virtual DbSet<VehicleInspection> VehicleInspections { get; set; }
        public virtual DbSet<RouteStatu> RouteStatus { get; set; }
    
        public virtual ObjectResult<Nullable<int>> checkOneCompanyBookingSelected(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> cityId, Nullable<int> routeNo)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("checkOneCompanyBookingSelected", isNrgParameter, termParameter, sDateParameter, eDateParameter, cityIdParameter, routeNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> checkOneCompanyBookingSelectedByPtype(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> cityId, Nullable<int> routeNo, Nullable<int> pType)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            var pTypeParameter = pType.HasValue ?
                new ObjectParameter("pType", pType) :
                new ObjectParameter("pType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("checkOneCompanyBookingSelectedByPtype", isNrgParameter, termParameter, sDateParameter, eDateParameter, cityIdParameter, routeNoParameter, pTypeParameter);
        }
    
        public virtual int CreateInvoiceUsingTempData(Nullable<int> copInvId, string username, string sessId)
        {
            var copInvIdParameter = copInvId.HasValue ?
                new ObjectParameter("CopInvId", copInvId) :
                new ObjectParameter("CopInvId", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var sessIdParameter = sessId != null ?
                new ObjectParameter("sessId", sessId) :
                new ObjectParameter("sessId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateInvoiceUsingTempData", copInvIdParameter, usernameParameter, sessIdParameter);
        }
    
        public virtual ObjectResult<GetAllBooking_Result> GetAllBooking(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> userid)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllBooking_Result>("GetAllBooking", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, useridParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetAllBookingCount(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> userid)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetAllBookingCount", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, useridParameter);
        }
    
        public virtual ObjectResult<getAllParents_Result> getAllParents(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllParents_Result>("getAllParents", categoryIdParameter);
        }
    
        public virtual ObjectResult<getAutoGenratedInvNo_Result> getAutoGenratedInvNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAutoGenratedInvNo_Result>("getAutoGenratedInvNo");
        }
    
        public virtual ObjectResult<string> getAutoInvNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getAutoInvNo");
        }
    
        public virtual ObjectResult<Nullable<long>> getAutoProformaNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("getAutoProformaNo");
        }
    
        public virtual ObjectResult<GetBooking_Result> GetBooking(Nullable<int> bookingStatus, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport)
        {
            var bookingStatusParameter = bookingStatus.HasValue ?
                new ObjectParameter("bookingStatus", bookingStatus) :
                new ObjectParameter("bookingStatus", typeof(int));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBooking_Result>("GetBooking", bookingStatusParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter);
        }
    
        public virtual ObjectResult<GetBookingByClintUser_Result> GetBookingByClintUser(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> clintUID)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var clintUIDParameter = clintUID.HasValue ?
                new ObjectParameter("clintUID", clintUID) :
                new ObjectParameter("clintUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBookingByClintUser_Result>("GetBookingByClintUser", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, clintUIDParameter);
        }
    
        public virtual ObjectResult<GetBookingByPendBookCategory_Result> GetBookingByPendBookCategory(Nullable<int> bookingStatus, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> pbookingCat, Nullable<int> userid)
        {
            var bookingStatusParameter = bookingStatus.HasValue ?
                new ObjectParameter("bookingStatus", bookingStatus) :
                new ObjectParameter("bookingStatus", typeof(int));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var pbookingCatParameter = pbookingCat.HasValue ?
                new ObjectParameter("pbookingCat", pbookingCat) :
                new ObjectParameter("pbookingCat", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBookingByPendBookCategory_Result>("GetBookingByPendBookCategory", bookingStatusParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, pbookingCatParameter, useridParameter);
        }
    
        public virtual ObjectResult<GetBookingCartDataTemp_Result> GetBookingCartDataTemp(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> cityId, Nullable<int> routeNo, string username, string sessId, Nullable<int> pType)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var sessIdParameter = sessId != null ?
                new ObjectParameter("sessId", sessId) :
                new ObjectParameter("sessId", typeof(string));
    
            var pTypeParameter = pType.HasValue ?
                new ObjectParameter("pType", pType) :
                new ObjectParameter("pType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBookingCartDataTemp_Result>("GetBookingCartDataTemp", isNrgParameter, termParameter, sDateParameter, eDateParameter, cityIdParameter, routeNoParameter, usernameParameter, sessIdParameter, pTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetBookingCount(Nullable<int> bookingStatus, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport)
        {
            var bookingStatusParameter = bookingStatus.HasValue ?
                new ObjectParameter("bookingStatus", bookingStatus) :
                new ObjectParameter("bookingStatus", typeof(int));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetBookingCount", bookingStatusParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetBookingCountByClientUser(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> clintUID)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var clintUIDParameter = clintUID.HasValue ?
                new ObjectParameter("clintUID", clintUID) :
                new ObjectParameter("clintUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetBookingCountByClientUser", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, clintUIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetBookingCountByPendBookCategory(Nullable<int> bookingStatus, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> pbookingCat, Nullable<int> userid)
        {
            var bookingStatusParameter = bookingStatus.HasValue ?
                new ObjectParameter("bookingStatus", bookingStatus) :
                new ObjectParameter("bookingStatus", typeof(int));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var pbookingCatParameter = pbookingCat.HasValue ?
                new ObjectParameter("pbookingCat", pbookingCat) :
                new ObjectParameter("pbookingCat", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetBookingCountByPendBookCategory", bookingStatusParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, pbookingCatParameter, useridParameter);
        }
    
        public virtual ObjectResult<GetCorporateDs_Result> GetCorporateDs(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCorporateDs_Result>("GetCorporateDs", isNrgParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter);
        }
    
        public virtual ObjectResult<GetCorporateDsByPType_Result> GetCorporateDsByPType(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<int> pType, string bType, Nullable<bool> isExport, Nullable<int> cityId, Nullable<int> routeNo)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var pTypeParameter = pType.HasValue ?
                new ObjectParameter("pType", pType) :
                new ObjectParameter("pType", typeof(int));
    
            var bTypeParameter = bType != null ?
                new ObjectParameter("bType", bType) :
                new ObjectParameter("bType", typeof(string));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCorporateDsByPType_Result>("GetCorporateDsByPType", isNrgParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, pTypeParameter, bTypeParameter, isExportParameter, cityIdParameter, routeNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCorporateDsCount(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCorporateDsCount", isNrgParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCorporateDsCountByPType(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<int> pType, string bType, Nullable<bool> isExport, Nullable<int> cityId, Nullable<int> routeNo)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var pTypeParameter = pType.HasValue ?
                new ObjectParameter("pType", pType) :
                new ObjectParameter("pType", typeof(int));
    
            var bTypeParameter = bType != null ?
                new ObjectParameter("bType", bType) :
                new ObjectParameter("bType", typeof(string));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCorporateDsCountByPType", isNrgParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, pTypeParameter, bTypeParameter, isExportParameter, cityIdParameter, routeNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCorporateDsCountNew(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> cityId, Nullable<int> routeNo)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCorporateDsCountNew", isNrgParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, cityIdParameter, routeNoParameter);
        }
    
        public virtual ObjectResult<GetCorporateDsEdit_Result> GetCorporateDsEdit(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<int> tInvID)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var tInvIDParameter = tInvID.HasValue ?
                new ObjectParameter("TInvID", tInvID) :
                new ObjectParameter("TInvID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCorporateDsEdit_Result>("GetCorporateDsEdit", isNrgParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, tInvIDParameter);
        }
    
        public virtual ObjectResult<GetCorporateDsNew_Result> GetCorporateDsNew(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> cityId, Nullable<int> routeNo)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCorporateDsNew_Result>("GetCorporateDsNew", isNrgParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, cityIdParameter, routeNoParameter);
        }
    
        public virtual ObjectResult<GetMISVyTaxInvNo_Result> GetMISVyTaxInvNo(Nullable<int> taxInvId, Nullable<bool> isExport)
        {
            var taxInvIdParameter = taxInvId.HasValue ?
                new ObjectParameter("taxInvId", taxInvId) :
                new ObjectParameter("taxInvId", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMISVyTaxInvNo_Result>("GetMISVyTaxInvNo", taxInvIdParameter, isExportParameter);
        }
    
        public virtual ObjectResult<GetPendingBookingByClintUser_Result> GetPendingBookingByClintUser(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> clintUID)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var clintUIDParameter = clintUID.HasValue ?
                new ObjectParameter("clintUID", clintUID) :
                new ObjectParameter("clintUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPendingBookingByClintUser_Result>("GetPendingBookingByClintUser", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, clintUIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetPendingBookingCountByClientUser(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> clintUID)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var clintUIDParameter = clintUID.HasValue ?
                new ObjectParameter("clintUID", clintUID) :
                new ObjectParameter("clintUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetPendingBookingCountByClientUser", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, clintUIDParameter);
        }
    
        public virtual ObjectResult<GetUnbilledBooking_Result> GetUnbilledBooking(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUnbilledBooking_Result>("GetUnbilledBooking", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter);
        }
    
        public virtual ObjectResult<GetUnbilledBookingByPType_Result> GetUnbilledBookingByPType(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<int> pType, string bType, Nullable<bool> isExport)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var pTypeParameter = pType.HasValue ?
                new ObjectParameter("pType", pType) :
                new ObjectParameter("pType", typeof(int));
    
            var bTypeParameter = bType != null ?
                new ObjectParameter("bType", bType) :
                new ObjectParameter("bType", typeof(string));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUnbilledBookingByPType_Result>("GetUnbilledBookingByPType", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, pTypeParameter, bTypeParameter, isExportParameter);
        }
    
        public virtual ObjectResult<GetUnbilledBookingByPTypeNew_Result> GetUnbilledBookingByPTypeNew(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<int> pType, string bType, Nullable<bool> isExport, Nullable<int> routeNo)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var pTypeParameter = pType.HasValue ?
                new ObjectParameter("pType", pType) :
                new ObjectParameter("pType", typeof(int));
    
            var bTypeParameter = bType != null ?
                new ObjectParameter("bType", bType) :
                new ObjectParameter("bType", typeof(string));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUnbilledBookingByPTypeNew_Result>("GetUnbilledBookingByPTypeNew", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, pTypeParameter, bTypeParameter, isExportParameter, routeNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetUnbilledBookingCount(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetUnbilledBookingCount", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetUnbilledBookingCountByPType(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<int> pType, string bType, Nullable<bool> isExport)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var pTypeParameter = pType.HasValue ?
                new ObjectParameter("pType", pType) :
                new ObjectParameter("pType", typeof(int));
    
            var bTypeParameter = bType != null ?
                new ObjectParameter("bType", bType) :
                new ObjectParameter("bType", typeof(string));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetUnbilledBookingCountByPType", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, pTypeParameter, bTypeParameter, isExportParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetUnbilledBookingCountByPTypeNew(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<int> pType, string bType, Nullable<bool> isExport, Nullable<int> routeNo)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var pTypeParameter = pType.HasValue ?
                new ObjectParameter("pType", pType) :
                new ObjectParameter("pType", typeof(int));
    
            var bTypeParameter = bType != null ?
                new ObjectParameter("bType", bType) :
                new ObjectParameter("bType", typeof(string));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetUnbilledBookingCountByPTypeNew", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, pTypeParameter, bTypeParameter, isExportParameter, routeNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetUnbilledBookingCountNew(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> routeNo)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetUnbilledBookingCountNew", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, routeNoParameter);
        }
    
        public virtual ObjectResult<GetUnbilledBookingNew_Result> GetUnbilledBookingNew(string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<bool> isExport, Nullable<int> routeNo)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var isExportParameter = isExport.HasValue ?
                new ObjectParameter("isExport", isExport) :
                new ObjectParameter("isExport", typeof(bool));
    
            var routeNoParameter = routeNo.HasValue ?
                new ObjectParameter("routeNo", routeNo) :
                new ObjectParameter("routeNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUnbilledBookingNew_Result>("GetUnbilledBookingNew", termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, isExportParameter, routeNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> getWorkingDayOfMonth(Nullable<System.DateTime> workingDate)
        {
            var workingDateParameter = workingDate.HasValue ?
                new ObjectParameter("workingDate", workingDate) :
                new ObjectParameter("workingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getWorkingDayOfMonth", workingDateParameter);
        }
    
        public virtual ObjectResult<uspTaxInvoicelist_Result> uspTaxInvoicelist(Nullable<int> taxInvId)
        {
            var taxInvIdParameter = taxInvId.HasValue ?
                new ObjectParameter("taxInvId", taxInvId) :
                new ObjectParameter("taxInvId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTaxInvoicelist_Result>("uspTaxInvoicelist", taxInvIdParameter);
        }
    
        public virtual ObjectResult<uspTaxInvoicelistbyClintUser_Result> uspTaxInvoicelistbyClintUser(Nullable<int> taxInvId, Nullable<int> clintUID)
        {
            var taxInvIdParameter = taxInvId.HasValue ?
                new ObjectParameter("taxInvId", taxInvId) :
                new ObjectParameter("taxInvId", typeof(int));
    
            var clintUIDParameter = clintUID.HasValue ?
                new ObjectParameter("clintUID", clintUID) :
                new ObjectParameter("clintUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspTaxInvoicelistbyClintUser_Result>("uspTaxInvoicelistbyClintUser", taxInvIdParameter, clintUIDParameter);
        }
    
        public virtual ObjectResult<getbookingHeadCount_Result> getbookingHeadCount(Nullable<int> finyear)
        {
            var finyearParameter = finyear.HasValue ?
                new ObjectParameter("finyear", finyear) :
                new ObjectParameter("finyear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getbookingHeadCount_Result>("getbookingHeadCount", finyearParameter);
        }
    
        public virtual ObjectResult<getCloseBookingDatabyMonth_Result> getCloseBookingDatabyMonth()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getCloseBookingDatabyMonth_Result>("getCloseBookingDatabyMonth");
        }
    
        public virtual ObjectResult<GetCorporateDsEdit1_Result> GetCorporateDsEdit1(Nullable<bool> isNrg, string term, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> page, Nullable<int> pageSize, Nullable<int> tInvID)
        {
            var isNrgParameter = isNrg.HasValue ?
                new ObjectParameter("isNrg", isNrg) :
                new ObjectParameter("isNrg", typeof(bool));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var tInvIDParameter = tInvID.HasValue ?
                new ObjectParameter("TInvID", tInvID) :
                new ObjectParameter("TInvID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCorporateDsEdit1_Result>("GetCorporateDsEdit1", isNrgParameter, termParameter, sDateParameter, eDateParameter, pageParameter, pageSizeParameter, tInvIDParameter);
        }
    
        public virtual int ManageEmployee(string action, Nullable<int> id, Nullable<int> company_Id, string company_location, string employee_Id, string employee_First_Name, string employee_Middle_Name, string employee_Last_Name, string gender, string mobileNumber, string alternateNumber, string email, Nullable<int> stateId, Nullable<int> cityId, Nullable<int> pincode, string employeeCurrentAddress, string loginUserName, string weekOff, string employeeGeoCode, string employeeBusinessUnit, string employeeDepartment, string employeeProjectName, string reportingManager, Nullable<int> primaryFacilityZone, Nullable<int> homeRouteName, Nullable<int> employeeDestinationArea, Nullable<int> employeeRegistrationType, Nullable<bool> isActive, Nullable<bool> isFirst, Nullable<double> latitude, Nullable<double> longitude, ObjectParameter responseMessage)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var company_IdParameter = company_Id.HasValue ?
                new ObjectParameter("Company_Id", company_Id) :
                new ObjectParameter("Company_Id", typeof(int));
    
            var company_locationParameter = company_location != null ?
                new ObjectParameter("Company_location", company_location) :
                new ObjectParameter("Company_location", typeof(string));
    
            var employee_IdParameter = employee_Id != null ?
                new ObjectParameter("Employee_Id", employee_Id) :
                new ObjectParameter("Employee_Id", typeof(string));
    
            var employee_First_NameParameter = employee_First_Name != null ?
                new ObjectParameter("Employee_First_Name", employee_First_Name) :
                new ObjectParameter("Employee_First_Name", typeof(string));
    
            var employee_Middle_NameParameter = employee_Middle_Name != null ?
                new ObjectParameter("Employee_Middle_Name", employee_Middle_Name) :
                new ObjectParameter("Employee_Middle_Name", typeof(string));
    
            var employee_Last_NameParameter = employee_Last_Name != null ?
                new ObjectParameter("Employee_Last_Name", employee_Last_Name) :
                new ObjectParameter("Employee_Last_Name", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var alternateNumberParameter = alternateNumber != null ?
                new ObjectParameter("AlternateNumber", alternateNumber) :
                new ObjectParameter("AlternateNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var pincodeParameter = pincode.HasValue ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(int));
    
            var employeeCurrentAddressParameter = employeeCurrentAddress != null ?
                new ObjectParameter("EmployeeCurrentAddress", employeeCurrentAddress) :
                new ObjectParameter("EmployeeCurrentAddress", typeof(string));
    
            var loginUserNameParameter = loginUserName != null ?
                new ObjectParameter("LoginUserName", loginUserName) :
                new ObjectParameter("LoginUserName", typeof(string));
    
            var weekOffParameter = weekOff != null ?
                new ObjectParameter("WeekOff", weekOff) :
                new ObjectParameter("WeekOff", typeof(string));
    
            var employeeGeoCodeParameter = employeeGeoCode != null ?
                new ObjectParameter("EmployeeGeoCode", employeeGeoCode) :
                new ObjectParameter("EmployeeGeoCode", typeof(string));
    
            var employeeBusinessUnitParameter = employeeBusinessUnit != null ?
                new ObjectParameter("EmployeeBusinessUnit", employeeBusinessUnit) :
                new ObjectParameter("EmployeeBusinessUnit", typeof(string));
    
            var employeeDepartmentParameter = employeeDepartment != null ?
                new ObjectParameter("EmployeeDepartment", employeeDepartment) :
                new ObjectParameter("EmployeeDepartment", typeof(string));
    
            var employeeProjectNameParameter = employeeProjectName != null ?
                new ObjectParameter("EmployeeProjectName", employeeProjectName) :
                new ObjectParameter("EmployeeProjectName", typeof(string));
    
            var reportingManagerParameter = reportingManager != null ?
                new ObjectParameter("ReportingManager", reportingManager) :
                new ObjectParameter("ReportingManager", typeof(string));
    
            var primaryFacilityZoneParameter = primaryFacilityZone.HasValue ?
                new ObjectParameter("PrimaryFacilityZone", primaryFacilityZone) :
                new ObjectParameter("PrimaryFacilityZone", typeof(int));
    
            var homeRouteNameParameter = homeRouteName.HasValue ?
                new ObjectParameter("HomeRouteName", homeRouteName) :
                new ObjectParameter("HomeRouteName", typeof(int));
    
            var employeeDestinationAreaParameter = employeeDestinationArea.HasValue ?
                new ObjectParameter("EmployeeDestinationArea", employeeDestinationArea) :
                new ObjectParameter("EmployeeDestinationArea", typeof(int));
    
            var employeeRegistrationTypeParameter = employeeRegistrationType.HasValue ?
                new ObjectParameter("EmployeeRegistrationType", employeeRegistrationType) :
                new ObjectParameter("EmployeeRegistrationType", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isFirstParameter = isFirst.HasValue ?
                new ObjectParameter("IsFirst", isFirst) :
                new ObjectParameter("IsFirst", typeof(bool));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ManageEmployee", actionParameter, idParameter, company_IdParameter, company_locationParameter, employee_IdParameter, employee_First_NameParameter, employee_Middle_NameParameter, employee_Last_NameParameter, genderParameter, mobileNumberParameter, alternateNumberParameter, emailParameter, stateIdParameter, cityIdParameter, pincodeParameter, employeeCurrentAddressParameter, loginUserNameParameter, weekOffParameter, employeeGeoCodeParameter, employeeBusinessUnitParameter, employeeDepartmentParameter, employeeProjectNameParameter, reportingManagerParameter, primaryFacilityZoneParameter, homeRouteNameParameter, employeeDestinationAreaParameter, employeeRegistrationTypeParameter, isActiveParameter, isFirstParameter, latitudeParameter, longitudeParameter, responseMessage);
        }
    
        public virtual int ManageVehicleInspection(Nullable<int> vendor_Id, Nullable<int> vehicle_Id, Nullable<System.DateTime> inspectionDate, Nullable<bool> aC_Working, string aC_Remarks, Nullable<bool> underInfluence, string underInfluence_Remarks, Nullable<bool> wiper_Seasonal, string wiper_Remarks, Nullable<bool> national_Permit, string nationalPermit_Remarks, Nullable<bool> windshield_Broken, string windshield_Remarks, Nullable<int> trip_Type, Nullable<bool> visible_Body_Dent, string bodyDent_Remarks, Nullable<bool> seat_Belts_Working, string seatBelts_Remarks, Nullable<bool> gPS_Not_Available, string gPS_Remarks, Nullable<bool> state_Permit, string statePermit_Remarks, Nullable<bool> unregistered_Drivers, string unregisteredDrivers_Remarks, Nullable<int> shift_Time, Nullable<bool> dirty_Unclean_Vehicle, string uncleanVehicle_Remarks, Nullable<bool> seat_Cover, string seatCover_Remarks, Nullable<bool> headlights_Indicators, string headlights_Remarks, Nullable<bool> insurance, string insurance_Remarks, Nullable<bool> unregistered_Cab, string unregisteredCab_Remarks, string city_Name, Nullable<bool> driver_Uniform, string driverUniform_Remarks, Nullable<bool> spare_Wheel, string spareWheel_Remarks, Nullable<bool> rC_Book, string rCBook_Remarks, Nullable<bool> pollution, string pollution_Remarks, Nullable<decimal> penalty_Amount, string feedback, Nullable<bool> fire_Extinguisher, string fireExtinguisher_Remarks, Nullable<bool> tool_Kit, string toolKit_Remarks, Nullable<bool> fitness, string fitness_Remarks, Nullable<bool> commercial_License, string commercialLicense_Remarks, string penalty_Description, Nullable<bool> first_Aid_Box, string firstAidBox_Remarks, Nullable<bool> fog_Lamp, string fogLamp_Remarks, Nullable<bool> passenger_Tax, string passengerTax_Remarks, Nullable<bool> vehicle_Model_Over_5_Years, string vehicleModel_Remarks, Nullable<int> total_NC_Count, Nullable<bool> isActive, Nullable<int> inspectionByEmployeeId, string adhocTime, string tripTypeMaster, ObjectParameter responseMessage)
        {
            var vendor_IdParameter = vendor_Id.HasValue ?
                new ObjectParameter("Vendor_Id", vendor_Id) :
                new ObjectParameter("Vendor_Id", typeof(int));
    
            var vehicle_IdParameter = vehicle_Id.HasValue ?
                new ObjectParameter("Vehicle_Id", vehicle_Id) :
                new ObjectParameter("Vehicle_Id", typeof(int));
    
            var inspectionDateParameter = inspectionDate.HasValue ?
                new ObjectParameter("InspectionDate", inspectionDate) :
                new ObjectParameter("InspectionDate", typeof(System.DateTime));
    
            var aC_WorkingParameter = aC_Working.HasValue ?
                new ObjectParameter("AC_Working", aC_Working) :
                new ObjectParameter("AC_Working", typeof(bool));
    
            var aC_RemarksParameter = aC_Remarks != null ?
                new ObjectParameter("AC_Remarks", aC_Remarks) :
                new ObjectParameter("AC_Remarks", typeof(string));
    
            var underInfluenceParameter = underInfluence.HasValue ?
                new ObjectParameter("UnderInfluence", underInfluence) :
                new ObjectParameter("UnderInfluence", typeof(bool));
    
            var underInfluence_RemarksParameter = underInfluence_Remarks != null ?
                new ObjectParameter("UnderInfluence_Remarks", underInfluence_Remarks) :
                new ObjectParameter("UnderInfluence_Remarks", typeof(string));
    
            var wiper_SeasonalParameter = wiper_Seasonal.HasValue ?
                new ObjectParameter("Wiper_Seasonal", wiper_Seasonal) :
                new ObjectParameter("Wiper_Seasonal", typeof(bool));
    
            var wiper_RemarksParameter = wiper_Remarks != null ?
                new ObjectParameter("Wiper_Remarks", wiper_Remarks) :
                new ObjectParameter("Wiper_Remarks", typeof(string));
    
            var national_PermitParameter = national_Permit.HasValue ?
                new ObjectParameter("National_Permit", national_Permit) :
                new ObjectParameter("National_Permit", typeof(bool));
    
            var nationalPermit_RemarksParameter = nationalPermit_Remarks != null ?
                new ObjectParameter("NationalPermit_Remarks", nationalPermit_Remarks) :
                new ObjectParameter("NationalPermit_Remarks", typeof(string));
    
            var windshield_BrokenParameter = windshield_Broken.HasValue ?
                new ObjectParameter("Windshield_Broken", windshield_Broken) :
                new ObjectParameter("Windshield_Broken", typeof(bool));
    
            var windshield_RemarksParameter = windshield_Remarks != null ?
                new ObjectParameter("Windshield_Remarks", windshield_Remarks) :
                new ObjectParameter("Windshield_Remarks", typeof(string));
    
            var trip_TypeParameter = trip_Type.HasValue ?
                new ObjectParameter("Trip_Type", trip_Type) :
                new ObjectParameter("Trip_Type", typeof(int));
    
            var visible_Body_DentParameter = visible_Body_Dent.HasValue ?
                new ObjectParameter("Visible_Body_Dent", visible_Body_Dent) :
                new ObjectParameter("Visible_Body_Dent", typeof(bool));
    
            var bodyDent_RemarksParameter = bodyDent_Remarks != null ?
                new ObjectParameter("BodyDent_Remarks", bodyDent_Remarks) :
                new ObjectParameter("BodyDent_Remarks", typeof(string));
    
            var seat_Belts_WorkingParameter = seat_Belts_Working.HasValue ?
                new ObjectParameter("Seat_Belts_Working", seat_Belts_Working) :
                new ObjectParameter("Seat_Belts_Working", typeof(bool));
    
            var seatBelts_RemarksParameter = seatBelts_Remarks != null ?
                new ObjectParameter("SeatBelts_Remarks", seatBelts_Remarks) :
                new ObjectParameter("SeatBelts_Remarks", typeof(string));
    
            var gPS_Not_AvailableParameter = gPS_Not_Available.HasValue ?
                new ObjectParameter("GPS_Not_Available", gPS_Not_Available) :
                new ObjectParameter("GPS_Not_Available", typeof(bool));
    
            var gPS_RemarksParameter = gPS_Remarks != null ?
                new ObjectParameter("GPS_Remarks", gPS_Remarks) :
                new ObjectParameter("GPS_Remarks", typeof(string));
    
            var state_PermitParameter = state_Permit.HasValue ?
                new ObjectParameter("State_Permit", state_Permit) :
                new ObjectParameter("State_Permit", typeof(bool));
    
            var statePermit_RemarksParameter = statePermit_Remarks != null ?
                new ObjectParameter("StatePermit_Remarks", statePermit_Remarks) :
                new ObjectParameter("StatePermit_Remarks", typeof(string));
    
            var unregistered_DriversParameter = unregistered_Drivers.HasValue ?
                new ObjectParameter("Unregistered_Drivers", unregistered_Drivers) :
                new ObjectParameter("Unregistered_Drivers", typeof(bool));
    
            var unregisteredDrivers_RemarksParameter = unregisteredDrivers_Remarks != null ?
                new ObjectParameter("UnregisteredDrivers_Remarks", unregisteredDrivers_Remarks) :
                new ObjectParameter("UnregisteredDrivers_Remarks", typeof(string));
    
            var shift_TimeParameter = shift_Time.HasValue ?
                new ObjectParameter("Shift_Time", shift_Time) :
                new ObjectParameter("Shift_Time", typeof(int));
    
            var dirty_Unclean_VehicleParameter = dirty_Unclean_Vehicle.HasValue ?
                new ObjectParameter("Dirty_Unclean_Vehicle", dirty_Unclean_Vehicle) :
                new ObjectParameter("Dirty_Unclean_Vehicle", typeof(bool));
    
            var uncleanVehicle_RemarksParameter = uncleanVehicle_Remarks != null ?
                new ObjectParameter("UncleanVehicle_Remarks", uncleanVehicle_Remarks) :
                new ObjectParameter("UncleanVehicle_Remarks", typeof(string));
    
            var seat_CoverParameter = seat_Cover.HasValue ?
                new ObjectParameter("Seat_Cover", seat_Cover) :
                new ObjectParameter("Seat_Cover", typeof(bool));
    
            var seatCover_RemarksParameter = seatCover_Remarks != null ?
                new ObjectParameter("SeatCover_Remarks", seatCover_Remarks) :
                new ObjectParameter("SeatCover_Remarks", typeof(string));
    
            var headlights_IndicatorsParameter = headlights_Indicators.HasValue ?
                new ObjectParameter("Headlights_Indicators", headlights_Indicators) :
                new ObjectParameter("Headlights_Indicators", typeof(bool));
    
            var headlights_RemarksParameter = headlights_Remarks != null ?
                new ObjectParameter("Headlights_Remarks", headlights_Remarks) :
                new ObjectParameter("Headlights_Remarks", typeof(string));
    
            var insuranceParameter = insurance.HasValue ?
                new ObjectParameter("Insurance", insurance) :
                new ObjectParameter("Insurance", typeof(bool));
    
            var insurance_RemarksParameter = insurance_Remarks != null ?
                new ObjectParameter("Insurance_Remarks", insurance_Remarks) :
                new ObjectParameter("Insurance_Remarks", typeof(string));
    
            var unregistered_CabParameter = unregistered_Cab.HasValue ?
                new ObjectParameter("Unregistered_Cab", unregistered_Cab) :
                new ObjectParameter("Unregistered_Cab", typeof(bool));
    
            var unregisteredCab_RemarksParameter = unregisteredCab_Remarks != null ?
                new ObjectParameter("UnregisteredCab_Remarks", unregisteredCab_Remarks) :
                new ObjectParameter("UnregisteredCab_Remarks", typeof(string));
    
            var city_NameParameter = city_Name != null ?
                new ObjectParameter("City_Name", city_Name) :
                new ObjectParameter("City_Name", typeof(string));
    
            var driver_UniformParameter = driver_Uniform.HasValue ?
                new ObjectParameter("Driver_Uniform", driver_Uniform) :
                new ObjectParameter("Driver_Uniform", typeof(bool));
    
            var driverUniform_RemarksParameter = driverUniform_Remarks != null ?
                new ObjectParameter("DriverUniform_Remarks", driverUniform_Remarks) :
                new ObjectParameter("DriverUniform_Remarks", typeof(string));
    
            var spare_WheelParameter = spare_Wheel.HasValue ?
                new ObjectParameter("Spare_Wheel", spare_Wheel) :
                new ObjectParameter("Spare_Wheel", typeof(bool));
    
            var spareWheel_RemarksParameter = spareWheel_Remarks != null ?
                new ObjectParameter("SpareWheel_Remarks", spareWheel_Remarks) :
                new ObjectParameter("SpareWheel_Remarks", typeof(string));
    
            var rC_BookParameter = rC_Book.HasValue ?
                new ObjectParameter("RC_Book", rC_Book) :
                new ObjectParameter("RC_Book", typeof(bool));
    
            var rCBook_RemarksParameter = rCBook_Remarks != null ?
                new ObjectParameter("RCBook_Remarks", rCBook_Remarks) :
                new ObjectParameter("RCBook_Remarks", typeof(string));
    
            var pollutionParameter = pollution.HasValue ?
                new ObjectParameter("Pollution", pollution) :
                new ObjectParameter("Pollution", typeof(bool));
    
            var pollution_RemarksParameter = pollution_Remarks != null ?
                new ObjectParameter("Pollution_Remarks", pollution_Remarks) :
                new ObjectParameter("Pollution_Remarks", typeof(string));
    
            var penalty_AmountParameter = penalty_Amount.HasValue ?
                new ObjectParameter("Penalty_Amount", penalty_Amount) :
                new ObjectParameter("Penalty_Amount", typeof(decimal));
    
            var feedbackParameter = feedback != null ?
                new ObjectParameter("Feedback", feedback) :
                new ObjectParameter("Feedback", typeof(string));
    
            var fire_ExtinguisherParameter = fire_Extinguisher.HasValue ?
                new ObjectParameter("Fire_Extinguisher", fire_Extinguisher) :
                new ObjectParameter("Fire_Extinguisher", typeof(bool));
    
            var fireExtinguisher_RemarksParameter = fireExtinguisher_Remarks != null ?
                new ObjectParameter("FireExtinguisher_Remarks", fireExtinguisher_Remarks) :
                new ObjectParameter("FireExtinguisher_Remarks", typeof(string));
    
            var tool_KitParameter = tool_Kit.HasValue ?
                new ObjectParameter("Tool_Kit", tool_Kit) :
                new ObjectParameter("Tool_Kit", typeof(bool));
    
            var toolKit_RemarksParameter = toolKit_Remarks != null ?
                new ObjectParameter("ToolKit_Remarks", toolKit_Remarks) :
                new ObjectParameter("ToolKit_Remarks", typeof(string));
    
            var fitnessParameter = fitness.HasValue ?
                new ObjectParameter("Fitness", fitness) :
                new ObjectParameter("Fitness", typeof(bool));
    
            var fitness_RemarksParameter = fitness_Remarks != null ?
                new ObjectParameter("Fitness_Remarks", fitness_Remarks) :
                new ObjectParameter("Fitness_Remarks", typeof(string));
    
            var commercial_LicenseParameter = commercial_License.HasValue ?
                new ObjectParameter("Commercial_License", commercial_License) :
                new ObjectParameter("Commercial_License", typeof(bool));
    
            var commercialLicense_RemarksParameter = commercialLicense_Remarks != null ?
                new ObjectParameter("CommercialLicense_Remarks", commercialLicense_Remarks) :
                new ObjectParameter("CommercialLicense_Remarks", typeof(string));
    
            var penalty_DescriptionParameter = penalty_Description != null ?
                new ObjectParameter("Penalty_Description", penalty_Description) :
                new ObjectParameter("Penalty_Description", typeof(string));
    
            var first_Aid_BoxParameter = first_Aid_Box.HasValue ?
                new ObjectParameter("First_Aid_Box", first_Aid_Box) :
                new ObjectParameter("First_Aid_Box", typeof(bool));
    
            var firstAidBox_RemarksParameter = firstAidBox_Remarks != null ?
                new ObjectParameter("FirstAidBox_Remarks", firstAidBox_Remarks) :
                new ObjectParameter("FirstAidBox_Remarks", typeof(string));
    
            var fog_LampParameter = fog_Lamp.HasValue ?
                new ObjectParameter("Fog_Lamp", fog_Lamp) :
                new ObjectParameter("Fog_Lamp", typeof(bool));
    
            var fogLamp_RemarksParameter = fogLamp_Remarks != null ?
                new ObjectParameter("FogLamp_Remarks", fogLamp_Remarks) :
                new ObjectParameter("FogLamp_Remarks", typeof(string));
    
            var passenger_TaxParameter = passenger_Tax.HasValue ?
                new ObjectParameter("Passenger_Tax", passenger_Tax) :
                new ObjectParameter("Passenger_Tax", typeof(bool));
    
            var passengerTax_RemarksParameter = passengerTax_Remarks != null ?
                new ObjectParameter("PassengerTax_Remarks", passengerTax_Remarks) :
                new ObjectParameter("PassengerTax_Remarks", typeof(string));
    
            var vehicle_Model_Over_5_YearsParameter = vehicle_Model_Over_5_Years.HasValue ?
                new ObjectParameter("Vehicle_Model_Over_5_Years", vehicle_Model_Over_5_Years) :
                new ObjectParameter("Vehicle_Model_Over_5_Years", typeof(bool));
    
            var vehicleModel_RemarksParameter = vehicleModel_Remarks != null ?
                new ObjectParameter("VehicleModel_Remarks", vehicleModel_Remarks) :
                new ObjectParameter("VehicleModel_Remarks", typeof(string));
    
            var total_NC_CountParameter = total_NC_Count.HasValue ?
                new ObjectParameter("Total_NC_Count", total_NC_Count) :
                new ObjectParameter("Total_NC_Count", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var inspectionByEmployeeIdParameter = inspectionByEmployeeId.HasValue ?
                new ObjectParameter("InspectionByEmployeeId", inspectionByEmployeeId) :
                new ObjectParameter("InspectionByEmployeeId", typeof(int));
    
            var adhocTimeParameter = adhocTime != null ?
                new ObjectParameter("AdhocTime", adhocTime) :
                new ObjectParameter("AdhocTime", typeof(string));
    
            var tripTypeMasterParameter = tripTypeMaster != null ?
                new ObjectParameter("TripTypeMaster", tripTypeMaster) :
                new ObjectParameter("TripTypeMaster", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ManageVehicleInspection", vendor_IdParameter, vehicle_IdParameter, inspectionDateParameter, aC_WorkingParameter, aC_RemarksParameter, underInfluenceParameter, underInfluence_RemarksParameter, wiper_SeasonalParameter, wiper_RemarksParameter, national_PermitParameter, nationalPermit_RemarksParameter, windshield_BrokenParameter, windshield_RemarksParameter, trip_TypeParameter, visible_Body_DentParameter, bodyDent_RemarksParameter, seat_Belts_WorkingParameter, seatBelts_RemarksParameter, gPS_Not_AvailableParameter, gPS_RemarksParameter, state_PermitParameter, statePermit_RemarksParameter, unregistered_DriversParameter, unregisteredDrivers_RemarksParameter, shift_TimeParameter, dirty_Unclean_VehicleParameter, uncleanVehicle_RemarksParameter, seat_CoverParameter, seatCover_RemarksParameter, headlights_IndicatorsParameter, headlights_RemarksParameter, insuranceParameter, insurance_RemarksParameter, unregistered_CabParameter, unregisteredCab_RemarksParameter, city_NameParameter, driver_UniformParameter, driverUniform_RemarksParameter, spare_WheelParameter, spareWheel_RemarksParameter, rC_BookParameter, rCBook_RemarksParameter, pollutionParameter, pollution_RemarksParameter, penalty_AmountParameter, feedbackParameter, fire_ExtinguisherParameter, fireExtinguisher_RemarksParameter, tool_KitParameter, toolKit_RemarksParameter, fitnessParameter, fitness_RemarksParameter, commercial_LicenseParameter, commercialLicense_RemarksParameter, penalty_DescriptionParameter, first_Aid_BoxParameter, firstAidBox_RemarksParameter, fog_LampParameter, fogLamp_RemarksParameter, passenger_TaxParameter, passengerTax_RemarksParameter, vehicle_Model_Over_5_YearsParameter, vehicleModel_RemarksParameter, total_NC_CountParameter, isActiveParameter, inspectionByEmployeeIdParameter, adhocTimeParameter, tripTypeMasterParameter, responseMessage);
        }
    
        public virtual ObjectResult<GetRoutes_Result> GetRoutes(string term)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoutes_Result>("GetRoutes", termParameter);
        }
    
        public virtual ObjectResult<GetUpcomingCab_Result> GetUpcomingCab(string employeeId)
        {
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUpcomingCab_Result>("GetUpcomingCab", employeeIdParameter);
        }
    
        public virtual ObjectResult<GetLiveCab_Result> GetLiveCab(string employeeId)
        {
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLiveCab_Result>("GetLiveCab", employeeIdParameter);
        }
    }
}
