@model VardaanCab.Domain.DTO.EmployeeDTO

@{
    ViewBag.Title = "Add";
    Layout = "~/Views/Shared/Master/_NewAdminLayout.cshtml";
    //Layout = null;

}
<!DOCTYPE html>
<html>
<head>
   <style>
       .dropdown-menu {
           padding: 10px;
       }

           .dropdown-menu label {
               display: block;
               cursor: pointer;
               padding: 5px;
           }

           .dropdown-menu input {
               margin-right: 10px;
           }
       .dropdown .dropdown-toggle {
           background-color: rgba(115, 102, 255, 0.08);
           color: #1d1e26;
           border-radius: .25rem;
           padding: 12px 10px;
           width: 100%;
           text-align: left;
       }

       .dropdown .dropdown-toggle {
           background-color: rgb(11 32 11 / 0%) !important;
           border: 1px solid #7f8389;
       }
   </style>
</head>
<body>
    @using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header  card-header--2">

                        <div>
                            <h5>Add Employee</h5>
                        </div>
                        <a href="/Employee/GetEmployeeList?menuId=@ViewBag.menuId" class="btn btn-primary">Show all</a>

                    </div>
                    <div class="card-body">

                        <div class="row">

                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Company_Id, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.DropDownListFor(a => a.Company_Id, Model.Customers, "Select Company", new { @class = "form-control" })
                                    <span class="text-danger">
                                        @Html.ValidationMessageFor(a => a.Company_Id)
                                    </span>
                                </div>
                            </div>

                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Company_location, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.EditorFor(model => model.Company_location, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Company_location, "", new { @class = "text-danger" })
                                </div>
                            </div>

                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Employee_Id, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.EditorFor(model => model.Employee_Id, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Employee_Id, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Employee_First_Name, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.EditorFor(model => model.Employee_First_Name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Employee_First_Name, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Employee_Middle_Name, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.EditorFor(model => model.Employee_Middle_Name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Employee_Middle_Name, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Employee_Last_Name, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.EditorFor(model => model.Employee_Last_Name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Employee_Last_Name, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.DropDownListFor(a => a.Gender,
             new SelectList(new List<SelectListItem>
             {
                 new SelectListItem { Text = "Male", Value = "Male" },
                 new SelectListItem { Text = "Female", Value = "Female" },
                 new SelectListItem { Text = "Other", Value = "Other" }
             }, "Value", "Text"),
             "Select Gender", new { @class = "form-control" })
                                    <span class="text-danger">
                                        @Html.ValidationMessageFor(a => a.Gender)
                                    </span>
                                </div>
                            </div>

                            <div class="col-md-6">
                                @Html.LabelFor(model => model.MobileNumber, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.EditorFor(model => model.MobileNumber, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.StateId, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.DropDownListFor(a => a.StateId, Model.States, "Select State", new { @class = "form-control" })
                                    <span class="text-danger">
                                        @Html.ValidationMessageFor(a => a.StateId)
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="row">


                            <div class="col-md-6">
                                @Html.LabelFor(model => model.CityId, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.DropDownListFor(a => a.CityId, Enumerable.Empty<SelectListItem>(), "Select City", new { @class = "form-control" })
                                    <span class="text-danger">
                                        @Html.ValidationMessageFor(a => a.CityId)
                                    </span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Pincode, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.EditorFor(model => model.Pincode, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Pincode, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">


                            <div class="col-md-6">
                                @Html.LabelFor(model => model.EmployeeCurrentAddress, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.EditorFor(model => model.EmployeeCurrentAddress, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.EmployeeCurrentAddress, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.LoginUserName, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.EditorFor(model => model.LoginUserName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.LoginUserName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">


                            <div class="col-md-6">
                                @Html.LabelFor(model => model.WeekOff, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    <div class="dropdown">
                                        <button type="button" class="btn btn-default dropdown-toggle form-control" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                            Select Days
                                        </button>
                                        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton" style="width: 100%; max-height: 200px; overflow-y: auto;">
                                            <li>
                                                <label>
                                                    <input type="checkbox" id="selectAll"> Select All
                                                </label>
                                            </li>
                                            @foreach (var day in Model.DayLists)
                                            {
                                                <li>
                                                    <label>
                                                        <input type="checkbox" class="day-checkbox" value="@day.Value" @(Model.WeekOffs.Contains(day.Value) ? "checked" : "")>
                                                        @day.Text
                                                    </label>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                    <input type="hidden" id="WeekOff" name="WeekOffs" value="@string.Join(",", Model.WeekOffs)" />
                                    <span class="text-danger">@Html.ValidationMessageFor(a => a.WeekOffs)</span>
                                </div>
                            </div>

                            <div class="col-md-6">
                                @Html.LabelFor(model => model.EmployeeGeoCode, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.EditorFor(model => model.EmployeeGeoCode, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.EmployeeGeoCode, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">


                            <div class="col-md-6">
                                @Html.LabelFor(model => model.EmployeeBusinessUnit, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.EditorFor(model => model.EmployeeBusinessUnit, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.EmployeeBusinessUnit, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="col-md-6">
                                @Html.LabelFor(model => model.EmployeeDepartment, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.EditorFor(model => model.EmployeeDepartment, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.EmployeeDepartment, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">


                            <div class="col-md-6">
                                @Html.LabelFor(model => model.EmployeeProjectName, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.EditorFor(model => model.EmployeeProjectName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.EmployeeProjectName, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="col-md-6">
                                @Html.LabelFor(model => model.ReportingManager, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.EditorFor(model => model.ReportingManager, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ReportingManager, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">


                            <div class="col-md-6">
                                @Html.LabelFor(model => model.PrimaryFacilityZone, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.DropDownListFor(model => model.PrimaryFacilityZone, Enumerable.Empty<SelectListItem>(), "Select Primary Company Zone", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PrimaryFacilityZone, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.HomeRouteName, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.DropDownListFor(model => model.HomeRouteName, Enumerable.Empty<SelectListItem>(), "Select Home Route Name", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.HomeRouteName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">


                            <div class="col-md-6">
                                @Html.LabelFor(model => model.EmployeeDestinationArea, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.DropDownListFor(model => model.EmployeeDestinationArea, Enumerable.Empty<SelectListItem>(), "Select Employee Destination Area", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.EmployeeDestinationArea, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.EmployeeRegistrationType, htmlAttributes: new { @class = "control-label" })
                                <div class="form-group">
                                    @Html.DropDownListFor(model => model.EmployeeRegistrationType, Model.RegistrationTypes, "Select Registration Type", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.EmployeeRegistrationType, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                       
                    </div>
                    <div class="card-footer text-end">
                        <input type="submit" class="btn btn-primary" value="Save" />
                    </div>
                </div>
            </div>
        </div>
    </div>
}

    <script>
        $("#StateId").change(function () {
            var id = $(this).val();
            $.get('/Common/GetCityByState?stateId=' + id, function (r) {
                var dd = $("#CityId");
                dd.empty();
                dd.append('<option value="">Select City</option>');
                $.each(r, function (k, v) {
                    dd.append('<option value="' + v.Id + '">' + v.CityName + '</option>');

                })
            })
        });

        $("#Company_Id").change(function () {
            var id = $(this).val();
            $.get('/Common/GetCompanyZonesByID?Customer_Id=' + id, function (r) {
                var dd = $("#PrimaryFacilityZone");
                dd.empty();
                dd.append('<option value="">Select Primary Company Zone</option>');
                $.each(r, function (k, v) {
                    dd.append('<option value="' + v.Id + '">' + v.CompanyZone1 + '</option>');

                })
            })
        });
        $("#PrimaryFacilityZone").change(function () {
            var id = $(this).val();
            $.get('/Common/GetHomeRouteNameByID?CompanyZone_ID=' + id, function (r) {
                var dd = $("#HomeRouteName");
                dd.empty();
                dd.append('<option value="">Select Home Route Name</option>');
                $.each(r, function (k, v) {
                    dd.append('<option value="' + v.Id + '">' + v.HomeRouteName + '</option>');

                })
            })
        });
        $("#HomeRouteName").change(function () {
            var id = $(this).val();
            $.get('/Common/GetDestinationAreaByID?DestinationArea_ID=' + id, function (r) {
                var dd = $("#EmployeeDestinationArea");
                dd.empty();
                dd.append('<option value="">Select Destination Area</option>');
                $.each(r, function (k, v) {
                    dd.append('<option value="' + v.Id + '">' + v.DestinationAreaName + '</option>');

                })
            })
        });


    </script>
   
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const selectAllCheckbox = document.getElementById("selectAll");
            const dayCheckboxes = document.querySelectorAll(".day-checkbox");
            const hiddenInput = document.getElementById("WeekOff");
            const dropdownButton = document.getElementById("dropdownMenuButton");

            // Update hidden input value and dropdown button text
            function updateSelectedDays() {
                const selectedDays = Array.from(dayCheckboxes)
                    .filter((checkbox) => checkbox.checked)
                    .map((checkbox) => {
                        const dayText = checkbox.closest('label').textContent.trim(); // Get the text
                        const dayValue = checkbox.value; // Get the value
                        return { text: dayText, value: dayValue }; // Return both as an object
                    });

                // Update hidden input with selected values (only values)
                hiddenInput.value = selectedDays.map(day => day.value).join(",");

                // Update the dropdown button text to display the selected days' text
                if (selectedDays.length === 0) {
                    dropdownButton.textContent = "Select Days";
                } else if (selectedDays.length === dayCheckboxes.length) {
                    dropdownButton.textContent = "All Selected";
                } else {
                    dropdownButton.textContent = selectedDays.map(day => day.text).join(", ");
                }

                // Optionally, log selected days for inspection (both text and value)
                console.log(selectedDays); // [{text: 'Monday', value: '1'}, {text: 'Tuesday', value: '2'}]
            }

            // Handle "Select All" checkbox
            selectAllCheckbox.addEventListener("change", () => {
                const isChecked = selectAllCheckbox.checked;
                dayCheckboxes.forEach((checkbox) => {
                    checkbox.checked = isChecked;
                });
                updateSelectedDays();
            });

            // Update "Select All" checkbox state and selected days
            dayCheckboxes.forEach((checkbox) => {
                checkbox.addEventListener("change", () => {
                    const allChecked = Array.from(dayCheckboxes).every((box) => box.checked);
                    const anyChecked = Array.from(dayCheckboxes).some((box) => box.checked);

                    selectAllCheckbox.checked = allChecked;
                    selectAllCheckbox.indeterminate = !allChecked && anyChecked;

                    updateSelectedDays();
                });
            });

            // Initialize dropdown text
            updateSelectedDays();
        });


    </script>
</body>
</html>


