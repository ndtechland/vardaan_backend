@model VardaanCab.Domain.DTO.EmployeeDTO

@{
    ViewBag.Title = "Add";
    Layout = "~/Views/Shared/New_Master/_FinelAdminLayout.cshtml";
    //Layout = null;

}
<style>
    /*
    * Always set the map height explicitly to define the size of the div element
    * that contains the map.
    */
    #map {
        height: 300px;
        width: 100%;
    }


    /*
    * Optional: Makes the sample page fill the window.
    */
    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    #infowindow-content {
        display: none;
    }

    #map #infowindow-content {
        display: inline;
    }

    .pac-card {
        background-color: #fff;
        border: 0;
        border-radius: 2px;
        box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
        margin: 10px;
        padding: 0 0.5em;
        font: 400 18px Roboto, Arial, sans-serif;
        overflow: hidden;
        font-family: Roboto;
        padding: 0;
    }

    #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
    }

    .pac-controls {
        display: inline-block;
        padding: 5px 11px;
    }

        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        /*margin-left: 12px;*/
        /* padding: 0 11px 0 13px;*/
        text-overflow: ellipsis;
        /*width: 400px;*/
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }

    #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
    }

    #target {
        width: 345px;
    }
</style>
<style>
    .loader-block {
        width: 120px;
        height: 120px;
        /*animation: spin 2s linear infinite;*/
        position: fixed;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        z-index: 9999;
        display: none;
    }

    .overlay {
        display: none;
        position: fixed;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        /*background-color: rgba(0, 0, 0, 0.5);*/ /* Adjust opacity as needed */
        z-index: 9998;
    }

    .blurred {
        filter: blur(1px);
    }
</style>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var message = "@TempData["Message"]";
        if (message != null) {
            if (message) {
                let alertText;

                alertText = "@TempData["Message"]";

                Swal.fire({
                    title: 'Success',
                    text: alertText,
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then((result) => {
                    if (result.isConfirmed) {
                        setTimeout(function () {
                            window.location.href = '@Url.Action("GetEmployeeList", "Employee")';
                        }, 1000);
                    }
                });
            }
        }
    });
</script>
@*<style>
        .dropdown-menu {
            padding: 10px;
        }

            .dropdown-menu label {
                display: block;
                cursor: pointer;
                padding: 5px;
            }

            .dropdown-menu input {
                margin-right: 10px;
            }

        .dropdown .dropdown-toggle {
            background-color: rgba(115, 102, 255, 0.08);
            color: #1d1e26;
            border-radius: .25rem;
            padding: 12px 10px;
            width: 100%;
            text-align: left;
        }

        .dropdown .dropdown-toggle {
            background-color: rgb(11 32 11 / 0%) !important;
            border: 1px solid #7f8389;
        }


        .import-row {
            display: flex;
            flex-direction: column; /* Stack the divs vertically */
            align-items: flex-end; /* Align all child elements to the right */
            width: 100%; /* Ensure full width */
        }

            .import-row .col-md-12 {
                text-align: right; /* Align text content to the right */
                margin-bottom: 15px; /* Space between sections */
            }

        /* Ensure that the import form container is aligned to the right side */
        .import-form-container {
            display: flex;
            justify-content: flex-end; /* Align file input and button to the right */
            align-items: center; /* Vertically center the file input and button */
            width: 100%; /* Ensure the container takes up the full width */
        }

            /* Optional: Add space between file input and button */
            .import-form-container .col-md-7,
            .import-form-container .col-md-2 {
                margin-left: 10px; /* Adds space between the file input and the button */
            }
    </style>*@


<div class="pcoded-content" id="pcoded-content">

    <!-- Page-header end -->
    <div class="pcoded-inner-content">
        <!-- Main-body start -->
        <div class="main-body">
            <div class="page-wrapper">
                <div class="card">
                    <div class="card-block">
                        <h5>@ViewBag.Heading</h5>
                        <div class="page-header-breadcrumb">
                            <ul class="breadcrumb">
                                <li class="breadcrumb-item">
                                    <a href="#!">
                                        <i class="fa fa-home"></i>
                                    </a>
                                </li>
                                <li class="breadcrumb-item">
                                    <a href="#!">ETS</a>
                                </li>
                                <li class="breadcrumb-item">
                                    <a href="#!">Add Employee</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
                <!-- Page body start -->
                <div class="page-body">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <!-- Heading -->
                                    <h5>@ViewBag.Heading</h5>

                                    <!-- Import and Export Section -->
                                    <div class="d-flex align-items-center">
                                        <!-- Export Section -->
                                        <b class="mr-2">Import To Excel Format:</b>
                                        <a href="@Url.Action("ExportToExcel", "Employee")" class="btn btn-link">
                                            <img src="~/files/assets/images/Export-Image.png" alt="Export" class="img-fluid" style="height: 42px; width: 108px;" />
                                        </a>

                                        <!-- Import Form -->
                                        @using (Html.BeginForm("ImportEmployeeData", "Employee", FormMethod.Post, new { enctype = "multipart/form-data" }))
                                        {
                                            <div class="d-flex align-items-center ml-3">
                                                <input type="file" class="form-control-file mr-2" name="file" required style="width: 200px;" />
                                                <button type="submit" class="btn btn-primary btn-sm" id="BtnImport">Import</button>
                                            </div>
                                        }
                                    </div>
                                </div>

                                <div class="card-block">
                                    @using (Html.BeginForm())
                                    {
                                        @Html.AntiForgeryToken()
                                        <div class="card-body">
                                            @if (TempData["msg"] != null)
                                            {
                                                <div class="row r">
                                                    <div class="col-md-12">
                                                        <div class="alert alert-success border-success">
                                                            @TempData["msg"]
                                                        </div>
                                                    </div>
                                                </div>
                                            }

                                            <input name="MenuId" type="hidden" value="@ViewBag.menuId" />
                                            <input name="Id" type="hidden" value="@Model.Id" />
                                            <div class="row">
                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.Company_Id, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                                    <div class="form-group">
                                                        @Html.DropDownListFor(a => a.Company_Id, Model.Customers, "Select Company", new { @class = "form-control", required = "required" })
                                                        <span class="text-danger">
                                                            @Html.ValidationMessageFor(a => a.Company_Id)
                                                        </span>
                                                    </div>
                                                </div>

                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.Company_location, htmlAttributes: new { @class = "control-label" })
                                                    <div class="form-group">
                                                        @Html.EditorFor(model => model.Company_location, new { htmlAttributes = new { @class = "form-control", placeholder = "Company Location" } })
                                                        @Html.ValidationMessageFor(model => model.Company_location, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.Employee_Id, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                                    <div class="form-group">
                                                        @Html.EditorFor(model => model.Employee_Id, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Employee Id", required = "required" } })
                                                        @Html.ValidationMessageFor(model => model.Employee_Id, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.Employee_First_Name, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                                    <div class="form-group">
                                                        @Html.EditorFor(model => model.Employee_First_Name, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter First Name", required = "required" } })
                                                        @Html.ValidationMessageFor(model => model.Employee_First_Name, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.Employee_Middle_Name, htmlAttributes: new { @class = "control-label" })
                                                    <div class="form-group">
                                                        @Html.EditorFor(model => model.Employee_Middle_Name, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Middle Name" } })
                                                        @Html.ValidationMessageFor(model => model.Employee_Middle_Name, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.Employee_Last_Name, htmlAttributes: new { @class = "control-label" })
                                                    <div class="form-group">
                                                        @Html.EditorFor(model => model.Employee_Last_Name, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Last Name" } })
                                                        @Html.ValidationMessageFor(model => model.Employee_Last_Name, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label", required = "required" }) <span class="text-danger">*</span>
                                                    <div class="form-group">
                                                        @Html.DropDownListFor(a => a.Gender,
                        new SelectList(new List<SelectListItem>
                        {
                                     new SelectListItem { Text = "Male", Value = "Male" },
                                     new SelectListItem { Text = "Female", Value = "Female" },
                                     new SelectListItem { Text = "Other", Value = "Other" }
                        }, "Value", "Text"),
                        "Select Gender", new { @class = "form-control" })
                                                        <span class="text-danger">
                                                            @Html.ValidationMessageFor(a => a.Gender)
                                                        </span>
                                                    </div>
                                                </div>

                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.MobileNumber, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                                    <div class="form-group">
                                                        @Html.EditorFor(model => model.MobileNumber, new { htmlAttributes = new { @class = "form-control", maxlength = "10", onkeydown = "validateNumericInput(event)", placeholder = "Enter Mobile No.", required = "required" } })
                                                        @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.AlternateNumber, htmlAttributes: new { @class = "control-label" })
                                                    <div class="form-group">
                                                        @Html.EditorFor(model => model.AlternateNumber, new { htmlAttributes = new { @class = "form-control", maxlength = "10", onkeydown = "validateNumericInput(event)", placeholder = "Enter Alternate Mob No." } })
                                                        @Html.ValidationMessageFor(model => model.AlternateNumber, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                                    <div class="form-group">
                                                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Email", required = "required" } })
                                                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.StateId, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                                    <div class="form-group">
                                                        @Html.DropDownListFor(a => a.StateId, Model.States, "Select State", new { @class = "form-control", required = "required" })
                                                        <span class="text-danger">
                                                            @Html.ValidationMessageFor(a => a.StateId)
                                                        </span>
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.CityId, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                                    <div class="form-group">
                                                        <input type="text" id="Cityid" hidden value="@ViewBag.CityId" />
                                                        @Html.DropDownListFor(a => a.CityId, Enumerable.Empty<SelectListItem>(), "Select City", new { @class = "form-control", required = "required" })
                                                        <span class="text-danger">
                                                            @Html.ValidationMessageFor(a => a.CityId)
                                                        </span>
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.Pincode, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                                                                                                                             <div class="form-group">
                                                                                                                                                 @Html.TextBoxFor(a => a.Pincode, new { @class = "form-control", placeholder = "PIN Code", maxlength = "6", onkeydown = "validateNumericInput(event)", required = "required" })
                                                                                                                                                 <span class="text-danger">
                                                                                                                                                     @Html.ValidationMessageFor(a => a.Pincode)
                                                                                                                                                 </span>
                                                                                                                                             </div>
                                                </div>

                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.EmployeeCurrentAddress, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                                    <div class="form-group">
                                                        @Html.EditorFor(model => model.EmployeeCurrentAddress, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Address", required = "required" } })
                                                        @Html.ValidationMessageFor(model => model.EmployeeCurrentAddress, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.LoginUserName, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                                    <div class="form-group">
                                                        @Html.EditorFor(model => model.LoginUserName, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Username", required = "required" } })
                                                        @Html.ValidationMessageFor(model => model.LoginUserName, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.WeekOff, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                                    <div class="form-group">
                                                        <div class="dropdown">
                                                            <button type="button" class="btn btn-default dropdown-toggle form-control" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                                                Select Days
                                                            </button>
                                                            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton" style="width: 100%; max-height: 200px; overflow-y: auto;">
                                                                <li>
                                                                    <label>
                                                                        <input type="checkbox" id="selectAll"> Select All
                                                                    </label>
                                                                </li>

                                                                @foreach (var day in Model.DayLists)
                                                                {
                                                                    <li>
                                                                        <label>
                                                                            <input type="hidden" id="WeekOff" name="WeekOffs" value="@string.Join(",", Model.WeekOffs)" />
                                                                            <input type="checkbox" name="WeekOff" class="day-checkbox" value="@day.Value" @(Model.WeekOffs.Contains(day.Value) ? "checked" : "")>
                                                                            @day.Text
                                                                        </label>
                                                                    </li>
                                                                }

                                                            </ul>
                                                        </div>
                                                        @*<input type="hidden" id="WeekOff" name="WeekOffs" value="@string.Join(",", Model.WeekOffs)" />*@
                                                        <span class="text-danger">@Html.ValidationMessageFor(a => a.WeekOffs)</span>
                                                    </div>
                                                </div>

                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.EmployeeGeoCode, htmlAttributes: new { @class = "control-label" })
                                                    <div class="form-group">
                                                        @Html.TextBoxFor(model => model.EmployeeGeoCode, new { @class = "form-control", id = "pac-input", placeholder = "Enter a location", required = "required" })
                                                        <span class="text-danger">
                                                            @Html.ValidationMessageFor(model => model.EmployeeGeoCode)
                                                        </span>
                                                    </div>
                                                </div>

                                                <!--Map-->
                                                <div class="row" style="display:none;">
                                                    <div class="row gx-3 mb-3">
                                                        <div class="col-md-12">
                                                            <div id="map"></div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.EmployeeBusinessUnit, htmlAttributes: new { @class = "control-label" })
                                                    <div class="form-group">
                                                        @Html.EditorFor(model => model.EmployeeBusinessUnit, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Business Unit" } })
                                                        @Html.ValidationMessageFor(model => model.EmployeeBusinessUnit, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.EmployeeDepartment, htmlAttributes: new { @class = "control-label", placeholder = "Enter Department", required = "required" })
                                                    <div class="form-group">
                                                        @Html.EditorFor(model => model.EmployeeDepartment, new { htmlAttributes = new { @class = "form-control" } })
                                                        @Html.ValidationMessageFor(model => model.EmployeeDepartment, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>


                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.EmployeeProjectName, htmlAttributes: new { @class = "control-label" })
                                                    <div class="form-group">
                                                        @Html.EditorFor(model => model.EmployeeProjectName, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Project Name" } })
                                                        @Html.ValidationMessageFor(model => model.EmployeeProjectName, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.ReportingManager, htmlAttributes: new { @class = "control-label" })
                                                    <div class="form-group">
                                                        @Html.EditorFor(model => model.ReportingManager, new { htmlAttributes = new { @class = "form-control", placeholder = "Manager Name" } })
                                                        @Html.ValidationMessageFor(model => model.ReportingManager, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>


                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.PrimaryFacilityZone, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                                    <div class="form-group">
                                                        <input type="text" id="PrimaryFacilityZoneHidden" hidden value="@ViewBag.PrimaryFacilityZone" />

                                                        @Html.DropDownListFor(model => model.PrimaryFacilityZone, Enumerable.Empty<SelectListItem>(), "Select Primary Company Zone", new { @class = "form-control", required = "required" })
                                                        @Html.ValidationMessageFor(model => model.PrimaryFacilityZone, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.HomeRouteName, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                                    <div class="form-group">
                                                        <input type="text" id="HomeRouteNameHidden" hidden value="@ViewBag.HomeRouteName" />

                                                        @Html.DropDownListFor(model => model.HomeRouteName, Enumerable.Empty<SelectListItem>(), "Select Home Route Name", new { @class = "form-control", required = "required" })
                                                        @Html.ValidationMessageFor(model => model.HomeRouteName, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>


                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.EmployeeDestinationArea, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                                    <div class="form-group">
                                                        <input type="text" id="EmployeeDestinationAreaHidden" hidden value="@ViewBag.EmployeeDestinationArea" />


                                                        @Html.DropDownListFor(model => model.EmployeeDestinationArea, Enumerable.Empty<SelectListItem>(), "Select Employee Destination Area", new { @class = "form-control", required = "required" })
                                                        @Html.ValidationMessageFor(model => model.EmployeeDestinationArea, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.LabelFor(model => model.EmployeeRegistrationType, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                                                    <div class="form-group">
                                                        @Html.DropDownListFor(model => model.EmployeeRegistrationType, Model.RegistrationTypes, "Select Registration Type", new { @class = "form-control", required = "required" })
                                                        @Html.ValidationMessageFor(model => model.EmployeeRegistrationType, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="card-footer text-end">
                                            <input type="submit" class="btn btn-primary" value="@ViewBag.BtnTXT" />

                                        </div>
                                    }
                                </div>
                            </div>
                        </div>


                    </div>
                </div>
                <!-- Page body end -->
            </div>
        </div>
    </div>
</div>
<div class="overlay" id="overlay"></div>
<div class="loader-block" id="loader-block">
    <div class="preloader6">
        <hr>
    </div>
</div>
<!--End new-->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $(document).on("click", "#BtnImport", function () {
        document.getElementById('loader-block').style.display = 'block';
        document.getElementById('overlay').style.display = 'block';
        document.getElementById('pcoded-content').classList.add('blurred');
    })
    document.getElementById('loader-block').style.display = 'none';
    document.getElementById('overlay').style.display = 'none';
    document.getElementById('pcoded-content').classList.remove('blurred');
</script>
<script>
    $(document).ready(function () {
        $("#myForm").submit(function (e) {
            var isValid = true;
            // Check if all required fields are filled
            $(this).find("[required]").each(function () {
                if ($(this).val() == "") {
                    isValid = false;
                    // Highlight the field
                    $(this).addClass("is-invalid");
                } else {
                    $(this).removeClass("is-invalid");
                }
            });

            // If validation fails, prevent form submission
            if (!isValid) {
                e.preventDefault();
                alert("Please fill in all required fields.");
            }
        });
    });
</script>
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Errors in Uploaded Data</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <table id="errorTable" class="datatable table table-striped">
                    <thead>
                        <tr>
                            <th>Row</th>
                            <th>Error Type</th>
                            <th>Description</th>

                        </tr>
                    </thead>
                    <tbody>
                        <!-- Error rows will be dynamically added here -->
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default waves-effect " data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    function validateNumericInput(event) {
        if ([46, 8, 9, 27, 13].indexOf(event.keyCode) !== -1 ||
            (event.keyCode == 65 && event.ctrlKey === true) ||
            (event.keyCode >= 35 && event.keyCode <= 39)) {
            return;
        }
        if ((event.shiftKey || (event.keyCode < 48 || event.keyCode > 57)) && (event.keyCode < 96 || event.keyCode > 105)) {
            event.preventDefault();
        }
    }

</script>
<script>
        document.addEventListener("DOMContentLoaded", function () {
            const hasErrors = '@Session["HasErrors"]' === 'True';
            if (hasErrors) {
                const errorData = JSON.parse('@Html.Raw(Session["ExcelErrors"])');
                const errorTable = document.getElementById("errorTable").querySelector("tbody");

                // Populate the table with error data
                errorData.forEach(error => {
                    const row = errorTable.insertRow();
                    const affectedRowCell = row.insertCell(0);
                    const errorTypeCell = row.insertCell(1);
                    const descriptionCell = row.insertCell(2);



                    affectedRowCell.textContent = error.AffectedRow;
                    errorTypeCell.textContent = error.ErrorType;
                    descriptionCell.textContent = error.Description;

                });

                // Show the modal
                const modal = new bootstrap.Modal(document.getElementById("exampleModal"));
                modal.show();
            }
        });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function (event) {

        $("#StateId").change(function () {
            var id = $(this).val();
            $.get('/Common/GetCityByState?stateId=' + id, function (r) {
                var dd = $("#CityId");
                dd.empty();
                dd.append('<option value="">Select City</option>');
                $.each(r, function (k, v) {
                    dd.append('<option value="' + v.Id + '">' + v.CityName + '</option>');

                })
            })
        });


        $(document).ready(function () {
            var id = $("#StateId").val();
            $.get('/Common/GetCityByState?stateId=' + id, function (r) {
                var dd = $("#CityId");
                dd.empty();
                dd.append('<option value="">Select City</option>');
                $.each(r, function (k, v) {
                    dd.append('<option value="' + v.Id + '">' + v.CityName + '</option>');

                })
                $("#CityId").val($("#Cityid").val());
            })
        });

        //Get Zone
        $("#Company_Id").change(function () {
            var id = $(this).val();
            $.get('/Common/GetCompanyZonesByID?Customer_Id=' + id, function (r) {
                var dd = $("#PrimaryFacilityZone");
                dd.empty();
                dd.append('<option value="">Select Primary Company Zone</option>');
                $.each(r, function (k, v) {
                    dd.append('<option value="' + v.Id + '">' + v.CompanyZone1 + '</option>');

                })
            })
        });

        $(document).ready(function () {
            var id = $("#Company_Id").val();
            $.get('/Common/GetCompanyZonesByID?Customer_Id=' + id, function (r) {
                var dd = $("#PrimaryFacilityZone");
                dd.empty();
                dd.append('<option value="">Select Primary Company Zone</option>');
                $.each(r, function (k, v) {
                    dd.append('<option value="' + v.Id + '">' + v.CompanyZone1 + '</option>');

                })
                $("#PrimaryFacilityZone").val($("#PrimaryFacilityZoneHidden").val());
            })
        });

        //Get Home Route
        $("#PrimaryFacilityZone").change(function () {
            var id = $(this).val();
            $.get('/Common/GetHomeRouteNameByID?CompanyZone_ID=' + id, function (r) {
                var dd = $("#HomeRouteName");
                dd.empty();
                dd.append('<option value="">Select Home Route Name</option>');
                $.each(r, function (k, v) {
                    dd.append('<option value="' + v.Id + '">' + v.HomeRouteName + '</option>');

                })
            })
        });

        $(document).ready(function () {
            var id = $("#PrimaryFacilityZoneHidden").val();
            $.get('/Common/GetHomeRouteNameByID?CompanyZone_ID=' + id, function (r) {
                var dd = $("#HomeRouteName");
                dd.empty();
                dd.append('<option value="">Select Home Route Name</option>');
                $.each(r, function (k, v) {
                    dd.append('<option value="' + v.Id + '">' + v.HomeRouteName + '</option>');

                })
                $("#HomeRouteName").val($("#HomeRouteNameHidden").val());
            })
        });

        //Get Destination Area
        $("#HomeRouteName").change(function () {
            var id = $(this).val();
            $.get('/Common/GetDestinationAreaByID?DestinationArea_ID=' + id, function (r) {
                var dd = $("#EmployeeDestinationArea");
                dd.empty();
                dd.append('<option value="">Select Destination Area</option>');
                $.each(r, function (k, v) {
                    dd.append('<option value="' + v.Id + '">' + v.DestinationAreaName + '</option>');

                })
            })
        });

        $(document).ready(function () {
            var id = $("#HomeRouteNameHidden").val();
            $.get('/Common/GetDestinationAreaByID?DestinationArea_ID=' + id, function (r) {
                var dd = $("#EmployeeDestinationArea");
                dd.empty();
                dd.append('<option value="">Select Destination Area</option>');
                $.each(r, function (k, v) {
                    dd.append('<option value="' + v.Id + '">' + v.DestinationAreaName + '</option>');

                })
                $("#EmployeeDestinationArea").val($("#EmployeeDestinationAreaHidden").val());
            })
        });
    });
</script>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        const selectAllCheckbox = document.getElementById("selectAll");
        const dayCheckboxes = document.querySelectorAll(".day-checkbox");
        const hiddenInput = document.getElementById("WeekOff");
        const dropdownButton = document.getElementById("dropdownMenuButton");

        // Update hidden input value and dropdown button text
        function updateSelectedDays() {
            const selectedDays = Array.from(dayCheckboxes)
                .filter((checkbox) => checkbox.checked)
                .map((checkbox) => {
                    const dayText = checkbox.closest('label').textContent.trim();
                    const dayValue = checkbox.value;
                    return { text: dayText, value: dayValue };
                });

            hiddenInput.value = selectedDays.map(day => day.value).join(",");

            if (selectedDays.length === 0) {
                dropdownButton.textContent = "Select Days";
            } else if (selectedDays.length === dayCheckboxes.length) {
                dropdownButton.textContent = "All Selected";
            } else {
                dropdownButton.textContent = selectedDays.map(day => day.text).join(", ");
            }
        }

        // Initialize "Select All" checkbox state
        function initializeSelectAllCheckbox() {
            const allChecked = Array.from(dayCheckboxes).every((box) => box.checked);
            const anyChecked = Array.from(dayCheckboxes).some((box) => box.checked);

            selectAllCheckbox.checked = allChecked;
            selectAllCheckbox.indeterminate = !allChecked && anyChecked;
        }

        dayCheckboxes.forEach((checkbox) => {
            checkbox.addEventListener("change", () => {
                initializeSelectAllCheckbox();
                updateSelectedDays();
            });
        });

        selectAllCheckbox.addEventListener("change", () => {
            const isChecked = selectAllCheckbox.checked;
            dayCheckboxes.forEach((checkbox) => {
                checkbox.checked = isChecked;
            });
            updateSelectedDays();
        });

        updateSelectedDays();
        initializeSelectAllCheckbox();
    });

</script>

<script>

    function initAutocomplete() {
        // Initialize the map
        const map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: -33.8688, lng: 151.2195 }, // Default to Sydney
            zoom: 13,
            mapTypeId: "roadmap",
        });

        // Initialize the Autocomplete on the input element
        const input = document.getElementById("pac-input");
        const autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo("bounds", map);

        // Marker to indicate selected location on the map
        const marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29),
        });

        // Listen for place selection on the Autocomplete input
        autocomplete.addListener("place_changed", () => {
            marker.setVisible(false); // Hide marker initially
            const place = autocomplete.getPlace();

            if (!place.geometry || !place.geometry.location) {
                console.log("No details available for input: '" + place.name + "'");
                return;
            }

            // Recenter the map and place the marker on selected location
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17); // Zoom in if viewport not available
            }

            // Set marker properties
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            // Get the formatted address and set it into the input field
            const formattedAddress = place.formatted_address;

            // Set the formatted address into the input
            document.getElementById("pac-input").value = formattedAddress;
        });
    }
    // Load the Google Maps API script with callback to initAutocomplete
</script>
<script async
        defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBrbWFXlOYpaq51wteSyFS2UjdMPOWBlQw&callback=initMap&libraries=places&callback=initAutocomplete">

</script>