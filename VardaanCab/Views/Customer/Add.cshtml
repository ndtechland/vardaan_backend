@model VardaanCab.Domain.DTO.CustomerDTO
@{
    ViewBag.Title = "Add Client";
    Layout = "~/Views/Shared/Master/_NewAdminLayout.cshtml";
}
<link href="/css/fixtable.css" rel="stylesheet" />

<style>
    .row {
        margin-top: 1% !important;
    }
</style>

<style>
    /* 
 * Always set the map height explicitly to define the size of the div element
 * that contains the map. 
 */
    #map {
        height: 500px;
        width: 100%;
    }


    /* 
 * Optional: Makes the sample page fill the window. 
 */
    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    #infowindow-content {
        display: none;
    }

    #map #infowindow-content {
        display: inline;
    }

    .pac-card {
        background-color: #fff;
        border: 0;
        border-radius: 2px;
        box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
        margin: 10px;
        padding: 0 0.5em;
        font: 400 18px Roboto, Arial, sans-serif;
        overflow: hidden;
        font-family: Roboto;
        padding: 0;
    }

    #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
    }

    .pac-controls {
        display: inline-block;
        padding: 5px 11px;
    }

        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }

    #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
    }

    #target {
        width: 345px;
    }
</style>
<style>
 
 
 

    thead tr,
    tfoot tr {
        background: hsl(220, 50%, 80%);
    }

    tbody tr:nth-child(even) {
        background: hsl(220, 50%, 95%);
    }

    th, td {
        border: 1px solid;
        padding: 0.5em;
        text-align: left;
        vertical-align: top;
        font-weight: normal;
    }

    .scrollable thead,
    .scrollable tfoot,
    .scrollable tbody,
    .scrollable th,
    .scrollable td {
        display: block;
        width: 100%;
    }

    .scrollable thead,
    .scrollable tfoot,
    .scrollable tbody {
        overflow-y: scroll;
    }

    .scrollable thead,
    .scrollable tfoot {
        -ms-overflow-style: none;
    }

        .scrollable thead::-webkit-scrollbar,
        .scrollable tfoot::-webkit-scrollbar {
            visibility: hidden;
        }

    .scrollable tbody {
        max-height: 20em;
        position: relative;
        -ms-overflow-style: -ms-autohiding-scrollbar;
    }

    .scrollable tr {
        display: flex;
    }

    .scrollable tbody th,
    .scrollable tbody td {
        border-top: none;
    }

    .scrollable th:not(:last-child),
    .scrollable td:not(:last-child) {
        border-right: none;
    }


</style>
@using (Html.BeginForm())
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header  card-header--2">

                        <div>
                            <h5>Add Client</h5>
                        </div>
                        <a href="/Customer/All?menuId=@ViewBag.menuId" class="btn btn-info">Show all</a>

                    </div>

                    <div class="card-body">
                        <input type="hidden" name="MenuId" value="@ViewBag.menuId" />

                        <div style="width:100%">

                            @*<div class="row r">
                                    <div class="col-md-12">
                                        <a href="/Admin/SubMenu?menuId=@ViewBag.menuId" class="btn btn-info" style="margin-left:2%">Back</a>

                                        <a href="/Customer/All?menuId=@ViewBag.menuId" class="btn btn-info">Show all</a>
                                    </div>
                                </div>*@

                            @if (TempData["msg"] != null)
                            {
                                <div class="row r">
                                    <div class="col-md-12">
                                        <div class="alert alert-info">
                                            @TempData["msg"]
                                        </div>
                                    </div>
                                </div>
                            }


                            <div class="row r">
                                <div class="col-md-6">
                                    State *
                                    @Html.DropDownListFor(a => a.State_Id, Model.StateList, "Select", new { @class = "form-control", required = "required" })
                                    <span class="text-danger">
                                        @Html.ValidationMessageFor(a => a.State_Id)
                                    </span>
                                </div>
                                <div class="col-md-6">
                                    City *
                                    @Html.DropDownListFor(a => a.City_Id, Enumerable.Empty<SelectListItem>(), "Select City", new { @class = "form-control", required = "required" })

                                    <span class="text-danger">
                                        @Html.ValidationMessageFor(a => a.City_Id)
                                    </span>
                                </div>

                            </div>

                            <div class="row r">

                                <div class="col-md-6">
                                    Company Name *
                                    @Html.TextBoxFor(a => a.CompanyName, new { @class = "form-control" })
                                    <span class="text-danger">
                                        @Html.ValidationMessageFor(a => a.CompanyName)
                                    </span>
                                </div>
                                <div class="col-md-6">
                                    Parent Customer (If any)
                                    @Html.DropDownListFor(a => a.ParentCustomer_Id, Model.CustomerList, "Select", new { @class = "form-control" })
                                    <span class="text-danger">
                                        @Html.ValidationMessageFor(a => a.CustomerName)
                                    </span>
                                </div>
                            </div>

                            <div class="row r">
                                <div class="col-md-6">
                                    Contact Person Name *
                                    @Html.TextBoxFor(a => a.CustomerName, new { @class = "form-control" })
                                    <span class="text-danger">
                                        @Html.ValidationMessageFor(a => a.CustomerName)
                                    </span>
                                </div>
                                <div class="col-md-6">
                                    Email *
                                    @Html.TextBoxFor(a => a.Email, new { @class = "form-control" })
                                    <span class="text-danger">
                                        @Html.ValidationMessageFor(a => a.Email)
                                    </span>
                                </div>


                            </div>

                            <div class="row r">
                                <div class="col-md-6">
                                    Contact No *
                                    @Html.TextBoxFor(a => a.ContactNo, new { @class = "form-control" })
                                    <span class="text-danger">
                                        @Html.ValidationMessageFor(a => a.ContactNo)
                                    </span>
                                </div>
                                <div class="col-md-6">
                                    Alternate Contact No
                                    @Html.TextBoxFor(a => a.AlternateNo, new { @class = "form-control" })
                                    <span class="text-danger">
                                        @Html.ValidationMessageFor(a => a.AlternateNo)
                                    </span>
                                </div>


                            </div>


                            <div class="row r">
                                <div class="col-md-6">
                                    GSTIN
                                    @Html.TextBoxFor(a => a.GSTIN, new { @class = "form-control" })
                                    <span class="text-danger">
                                        @Html.ValidationMessageFor(a => a.GSTIN)
                                    </span>
                                </div>
                                <div class="col-md-6">
                                    Full Address *
                                    @Html.TextAreaFor(a => a.FullAddress, new { @class = "form-control" })
                                    <span class="text-danger">
                                        @Html.ValidationMessageFor(a => a.FullAddress)
                                    </span>
                                </div>

                            </div>
                        </div>

                        <div class="form-group" style="margin-top:2%;" id="packageDiv">
                            Packages *
                            @if (Model.Packages.Count() > 0)
                            {

                                <div class=" table-responsive table-desi scrollable">
                                    <table class="all-cars-table table table-striped">
                                        <thead>
                                            <tr>
                                                <th class="sticky-col first-col"><input type="checkbox" id="all" /></th>
                                                <th class="sticky-col second-col">Vehicle</th>
                                                <th class="sticky-col third-col">RentalType</th>
                                                <th>PackageType</th>
                                                <th>Fare</th>
                                                <th>MinKm</th>
                                                <th>MinHrs</th>
                                                <th>ExtraPerHour</th>
                                                <th>ExtraPerKm</th>
                                                <th>NightCharges</th>
                                                @*<th>Interstate Charges</th>*@
                                                <th>Outstation TA/Day</th>
                                                <th>Pickup loc.</th>
                                                <th>Drop loc.</th>
                                                <th>Days(For Monthly)</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @for (int i = 0; i < Model.Packages.Count(); i++)
                                            {

                                                <tr>
                                                    <td class="sticky-col first-col">@Html.CheckBoxFor(a => a.Packages[i].IsChecked, new { @class = "chkAvail" })</td>
                                                    <td class="sticky-col second-col">
                                                        @Html.HiddenFor(a => a.Packages[i].CorporatePackage_Id)
                                                        @Html.HiddenFor(a => a.Packages[i].RentalType_Id)
                                                        @Html.HiddenFor(a => a.Packages[i].VehicleModel_Id)

                                                        @Model.Packages[i].ModelName
                                                    </td>
                                                    <td class="sticky-col third-col">
                                                        <span>@Model.Packages[i].RentalTypeName</span>
                                                        @*@Html.TextBoxFor(a => a.Packages[i].RentalTypeName, new { @class = "form-control", Value = Model.Packages[i].RentalTypeName, disabled = "disabled" })*@
                                                    </td>
                                                    <td>
                                                        @Model.Packages[i].PackageTypeName
                                                    </td>


                                                    <td>
                                                        @Html.TextBoxFor(a => a.Packages[i].Fare, new { @class = "form-control", Value = Model.Packages[i].Fare, required = "required" })
                                                    </td>
                                                    @*<td><input type="text" class="form-control" name="Packages[@i].Fare" value="@Model.Packages[i].Fare" required /></td>*@
                                                    <td>@Html.TextBoxFor(a => a.Packages[i].MinKm, new { @class = "form-control", Value = Model.Packages[i].MinKm, required = "required" })</td>
                                                    <td>@Html.TextBoxFor(a => a.Packages[i].MinHrs, new { @class = "form-control", Value = Model.Packages[i].MinHrs, required = "required" })</td>
                                                    <td>@Html.TextBoxFor(a => a.Packages[i].ExtraPerHour, new { @class = "form-control", Value = Model.Packages[i].ExtraPerHour, required = "required" })</td>
                                                    <td>@Html.TextBoxFor(a => a.Packages[i].ExtraPerKm, new { @class = "form-control", Value = Model.Packages[i].ExtraPerKm, required = "required" })</td>
                                                    <td>@Html.TextBoxFor(a => a.Packages[i].NightCharges, new { @class = "form-control", Value = Model.Packages[i].NightCharges, required = "required" })</td>
                                                    @* <td>@Html.TextBoxFor(a => a.Packages[i].InterStateCharge, new { @class = "form-control", Value = Model.Packages[i].InterStateCharge, required = "required" })</td>*@
                                                    <td>@Html.TextBoxFor(a => a.Packages[i].OutStationCharge, new { @class = "form-control", Value = Model.Packages[i].OutStationCharge, required = "required" })</td>
                                                    <td>@Html.TextBoxFor(a => a.Packages[i].PickupLocation, new { @class = "form-control", Value = Model.Packages[i].PickupLocation })</td>
                                                    <td>@Html.TextBoxFor(a => a.Packages[i].DropLocation, new { @class = "form-control", Value = Model.Packages[i].DropLocation })</td>
                                                    <td>@Html.TextBoxFor(a => a.Packages[i].NoOfDays, new { @class = "form-control", Value = Model.Packages[i].NoOfDays })</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>



                            }
                        </div>


                        <input id="pac-input"
                               class="controls"
                               type="text"
                               placeholder="Enter a location" />
                        <!--Map-->
                        <div class="row gx-3 mb-3">
                            <div class="col-md-12">
                                <div id="map"></div>
                            </div>
                        </div>
                        <div class="form-group">
                            <input type="submit" class="btn btn-primary" value="Save" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script>
    $("#all").click(function () {
        var allPackage = $(".chkAvail");
        var chkCurrent = $(this);
        if (chkCurrent.prop("checked") == true) {
            allPackage.prop("checked", true);
        }
        else {
            allPackage.prop("checked", false);

        }
    });

    $("#ParentCustomer_Id").change(function () {
        var el = $(this);
        var id = el.val() ? parseInt(el.val()) : 0;
        var packageDiv = $("#packageDiv");
        if (id > 0) {
            packageDiv.hide();
        }
        else {
            packageDiv.show();
        }
    })


    $("#State_Id").change(function () {
        var id = $(this).val();
        $.get('/Common/GetCityByState?stateId=' + id, function (r) {
            var dd = $("#City_Id");
            dd.empty();
            dd.append('<option value="">Select city</option>');
            $.each(r, function (k, v) {
                dd.append('<option value="' + v.Id + '">' + v.CityName + '</option>');

            })
        })
    });

</script>
@*<script>
        let map;
        let marker;
        let circle;

        function initMap() {
            const initialLocation = { lat: 21.7679, lng: 78.8718 };
            map = new google.maps.Map(document.getElementById("map"), {
                center: initialLocation,
                zoom: 15,
            });

            marker = new google.maps.Marker({
                position: initialLocation,
                map: map,
                draggable: true,
            });

            circle = new google.maps.Circle({
                map: map,
                radius: 0,
                fillColor: "#FF0000",
                fillOpacity: 0.35,
                strokeColor: "#FF0000",
                strokeOpacity: 0.8,
            });

            google.maps.event.addListener(marker, "dragend", updateCircle);
            document.getElementById("radius-input").addEventListener("input", updateCircle);
        }

        function updateCircle() {
            const radiusInput = parseInt(document.getElementById("radius-input").value, 10);

            const position = marker.getPosition();
            circle.setCenter(position);
            circle.setRadius(radiusInput);

            const lat = position.lat();
            const lng = position.lng();
            document.getElementById("latitude").value = lat;
            document.getElementById("longitude").value = lng;

            console.log(`Latitude: ${lat}, Longitude: ${lng}, Radius: ${radiusInput} meters`);
            // alert(`Latitude: ${lat}, Longitude: ${lng}, Radius: ${radiusInput} meters`);
        }



        window.onload = initMap;
        document.getElementById("location-input").addEventListener('keyup', function () {

            const locationInput = document.getElementById("location-input").value;
            // const radiusInput = parseInt(document.getElementById("radius-input").value, 10);

            const geocoder = new google.maps.Geocoder();
            geocoder.geocode({ address: locationInput }, (results, status) => {
                if (status === "OK") {
                    map.setCenter(results[0].geometry.location);
                    marker.setPosition(results[0].geometry.location);
                    updateCircle();
                } else {
                    // alert("Geocode was not successful for the following reason: " + status);
                }
            });
        });
        function triggerKeyupIn2Seconds() {
            setTimeout(function () {
                // Create a new keyup event
                var event = new Event('keyup');

                // Dispatch the event on the input element
                document.getElementById("location-input").dispatchEvent(event);
            }, 2000);  // 2000 milliseconds = 2 seconds
        }

        // Example usage: call the function
        triggerKeyupIn2Seconds();
    </script>*@

<script>
    function initAutocomplete() {
        // Initialize the map
        const map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: -33.8688, lng: 151.2195 }, // Default to Sydney
            zoom: 13,
            mapTypeId: "roadmap",
        });

        // Initialize the Autocomplete on the input element
        const input = document.getElementById("pac-input");
        const autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo("bounds", map);

        // Marker to indicate selected location on the map
        const marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29),
        });

        // Listen for place selection on the Autocomplete input
        autocomplete.addListener("place_changed", () => {
            marker.setVisible(false); // Hide marker initially
            const place = autocomplete.getPlace();

            if (!place.geometry || !place.geometry.location) {
                console.log("No details available for input: '" + place.name + "'");
                return;
            }

            // Recenter map and place the marker on selected location
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17); // Zoom in if viewport not available
            }

            // Set marker properties
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);
        });
    }

    // Load the Google Maps API script with callback to initAutocomplete
</script>
<script async
        defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBrbWFXlOYpaq51wteSyFS2UjdMPOWBlQw&callback=initMap&libraries=places&callback=initAutocomplete"></script>
