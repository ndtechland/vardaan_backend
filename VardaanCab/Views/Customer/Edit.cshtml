@model VardaanCab.Domain.DTO.CustomerDTO
@{
    ViewBag.Title = "Edit Client";
    Layout = "~/Views/Shared/Master/_NewAdminLayout.cshtml";
}

<style>
    .row {
        margin-top: 1% !important;
    }
</style>
<style>
    /*
    * Always set the map height explicitly to define the size of the div element
    * that contains the map.
    */
    #map {
        height: 300px;
        width: 100%;
    }


    /*
    * Optional: Makes the sample page fill the window.
    */
    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    #infowindow-content {
        display: none;
    }

    #map #infowindow-content {
        display: inline;
    }

    .pac-card {
        background-color: #fff;
        border: 0;
        border-radius: 2px;
        box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
        margin: 10px;
        padding: 0 0.5em;
        font: 400 18px Roboto, Arial, sans-serif;
        overflow: hidden;
        font-family: Roboto;
        padding: 0;
    }

    #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
    }

    .pac-controls {
        display: inline-block;
        padding: 5px 11px;
    }

        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        /*margin-left: 12px;*/
        /* padding: 0 11px 0 13px;*/
        text-overflow: ellipsis;
        /*width: 400px;*/
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }

    #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
    }

    #target {
        width: 345px;
    }
</style>

@using (Html.BeginForm())
{
    <div class="container-fluid">
        <div class="row">

            <div class="col-12">
                <div class="row">
                    <div class="col-sm-12">
                        <!--driver detail start-->
                        <div class="card">
                            <div class="card-header">
                                <h5>Edit Client</h5>
                            </div>
                            <div class="card-body">

                                <div class="row r">
                                    <div class="col-md-12">
                                        <a href="/Customer/All" class="btn btn-primary">Show all</a>
                                    </div>
                                </div>

                                @if (TempData["msg"] != null)
                                {
                                    <div class="row r">
                                        <div class="col-md-12">
                                            <div class="alert alert-info">
                                                @TempData["msg"]
                                            </div>
                                        </div>
                                    </div>
                                }

                                @Html.HiddenFor(a => a.Id)
                                @Html.HiddenFor(a => a.IsActive)
                                @Html.HiddenFor(a => a.CreateDate)
                                @Html.HiddenFor(a => a.MenuId)


                                <div class="row r">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            State *
                                            @Html.DropDownListFor(a => a.State_Id, Model.StateList, "Select", new { @class = "form-control" })
                                            <span class="text-danger">
                                                @Html.ValidationMessageFor(a => a.State_Id)
                                            </span>
                                        </div>
                                        <div class="form-group">
                                            City *
                                            @Html.DropDownListFor(a => a.City_Id, Model.CityList, "Select", new { @class = "form-control" })
                                            <span class="text-danger">
                                                @Html.ValidationMessageFor(a => a.City_Id)
                                            </span>
                                        </div>
                                        <div class="form-group">
                                            Company Name *
                                            @Html.TextBoxFor(a => a.CompanyName, new { @class = "form-control" })
                                            <span class="text-danger">
                                                @Html.ValidationMessageFor(a => a.CompanyName)
                                            </span>
                                        </div>

                                        <div class="form-group">
                                            Contact Person Name *
                                            @Html.TextBoxFor(a => a.CustomerName, new { @class = "form-control" })
                                            <span class="text-danger">
                                                @Html.ValidationMessageFor(a => a.CustomerName)
                                            </span>
                                        </div>
                                        <div class="form-group">
                                            Parent Customer (If any)
                                            @Html.DropDownListFor(a => a.ParentCustomer_Id, Model.CustomerList, "Select", new { @class = "form-control" })
                                            <span class="text-danger">
                                                @Html.ValidationMessageFor(a => a.CustomerName)
                                            </span>
                                        </div>
                                        <div class="form-group">
                                            Email *
                                            @Html.TextBoxFor(a => a.Email, new { @class = "form-control" })
                                            <span class="text-danger">
                                                @Html.ValidationMessageFor(a => a.Email)
                                            </span>
                                        </div>

                                        <div class="form-group">
                                            Contact No *
                                            @Html.TextBoxFor(a => a.ContactNo, new { @class = "form-control" })
                                            <span class="text-danger">
                                                @Html.ValidationMessageFor(a => a.ContactNo)
                                            </span>
                                        </div>


                                        <div class="form-group">
                                            Alternate Contact No
                                            @Html.TextBoxFor(a => a.AlternateNo, new { @class = "form-control" })
                                            <span class="text-danger">
                                                @Html.ValidationMessageFor(a => a.AlternateNo)
                                            </span>
                                        </div>

                                        <div class="form-group">
                                            Full Editress *
                                            @Html.TextAreaFor(a => a.FullAddress, new { @class = "form-control" })
                                            <span class="text-danger">
                                                @Html.ValidationMessageFor(a => a.FullAddress)
                                            </span>
                                        </div>

                                        <div class="form-group">
                                            GSTIN
                                            @Html.TextBoxFor(a => a.GSTIN, new { @class = "form-control" })
                                            <span class="text-danger">
                                                @Html.ValidationMessageFor(a => a.GSTIN)
                                            </span>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                GEO Location
                                                @Html.TextBoxFor(a => a.GeoLocation, new { @class = "form-control", id = "pac-input", placeholder = "Enter a location" })
                                                <span class="text-danger">
                                                    @Html.ValidationMessageFor(a => a.GeoLocation)
                                                </span>


                                            </div>
                                        </div>
                                        <!--Map-->
                                        <div class="row">
                                            <div class="row gx-3 mb-3">
                                                <div class="col-md-12">
                                                    <div id="map"></div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>

                            </div>
                            <div class="card-footer text-end">
                                <input type="submit" class="btn btn-primary" value="Update" />
                                <a href="/Customer/All" class="btn btn-outline-primary">Cancel</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}
<script>
    $("#State_Id").change(function () {
        var id = $(this).val();
        $.get('/Common/GetCityByState?stateId=' + id, function (r) {
            var dd = $("#City_Id");
            dd.empty();
            dd.append('<option value="">Select city</option>');
            $.each(r, function (k, v) {
                dd.append('<option value="' + v.Id + '">' + v.CityName + '</option>');

            })
        })
    });

</script>
<script>
    function initAutocomplete() {
        // Initialize the map
        const map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: -33.8688, lng: 151.2195 }, // Default to Sydney
            zoom: 13,
            mapTypeId: "roadmap",
        });

        // Initialize the Autocomplete on the input element
        const input = document.getElementById("pac-input");
        const autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo("bounds", map);

        // Marker to indicate selected location on the map
        const marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29),
        });

        // Pre-fill map if location exists in the GeoLocation input
        const existingLocation = input.value;
        if (existingLocation) {
            const geocoder = new google.maps.Geocoder();
            geocoder.geocode({ address: existingLocation }, (results, status) => {
                if (status === "OK" && results[0]) {
                    const location = results[0].geometry.location;
                    map.setCenter(location);
                    map.setZoom(17);
                    marker.setPosition(location);
                    marker.setVisible(true);
                } else {
                    console.log("Geocode was not successful for the following reason: " + status);
                }
            });
        }

        // Listen for place selection on the Autocomplete input
        autocomplete.addListener("place_changed", () => {
            marker.setVisible(false); // Hide marker initially
            const place = autocomplete.getPlace();

            if (!place.geometry || !place.geometry.location) {
                console.log("No details available for input: '" + place.name + "'");
                return;
            }

            // Recenter map and place the marker on selected location
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17); // Zoom in if viewport not available
            }

            // Set marker properties
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);
        });
    }

    // Ensure Google Maps API is loaded with callback to initAutocomplete
</script>

<script async
        defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBrbWFXlOYpaq51wteSyFS2UjdMPOWBlQw&callback=initMap&libraries=places&callback=initAutocomplete"></script>
