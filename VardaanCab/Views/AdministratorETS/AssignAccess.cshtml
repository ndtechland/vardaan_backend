@model VardaanCab.Domain.DTO.AccessAssignDTO
@using System.Web.Script.Serialization
@{
    ViewBag.Title = "AssignAccess";
    Layout = "~/Views/Shared/Master/_NewAdminLayout.cshtml";
}
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
        margin: 0;
        padding: 0;
    }

    .container {
        width: 90%;
        margin: 20px auto;
        background-color: #f5f5f5;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .module-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #78909c;
        color: white;
        padding: 10px 15px;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
        margin-bottom: 5px;
    }

        .module-row:hover {
            background-color: #607d8b;
        }

    .sub-options {
        display: none;
        margin-top: 5px;
        background-color: #e0e0e0;
        padding: 10px;
        border-radius: 4px;
    }

    .sub-option-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px;
        border-bottom: 1px solid #ccc;
    }

        .sub-option-row:last-child {
            border-bottom: none;
        }

        .sub-option-row span {
            flex: 2;
            font-size: 14px;
        }

    .actions {
        flex: 1;
        display: flex;
        justify-content: space-evenly;
    }

        .actions button {
            border: none;
            border-radius: 4px;
            padding: 5px 10px;
            cursor: pointer;
            color: white;
            font-size: 14px;
        }

    .read-btn {
        background-color: #1e88e5;
    }

    .write-btn {
        background-color: #43a047;
    }

        .read-btn:hover, .write-btn:hover {
            opacity: 0.9;
        }
</style>
<style>
    .dropdown-container {
        position: relative;
    }

    .dropdown-toggle {
        display: inline-block;
        width: 100%;
        cursor: pointer;
        text-align: left;
    }

    .dropdown-search {
        display: none;
        margin-bottom: 5px;
        width: 100%;
    }

    .dropdown-options {
        display: none;
        position: absolute;
        z-index: 1000;
        background: #fff;
        border: 1px solid #ccc;
        width: 100%;
        max-height: 200px;
        overflow-y: auto;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .dropdown-container.open .dropdown-options {
        display: block;
    }

    .dropdown-container.open .dropdown-search {
        display: block;
    }

    .dropdown-item {
        display: flex;
        align-items: center;
        padding: 5px 10px;
    }

        .dropdown-item:hover {
            background-color: #f0f0f0;
        }
        .pointer-curser {
            pointer-events:none;
        }
</style>
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="row">
                <div class="col-sm-12">
                    <div class="card">
                        <div class="card-header  card-header--2">
                            <div>
                                <h5>@ViewBag.Heading</h5>
                            </div>
                        </div>
                        <form class="theme-form mega-form" action="AssignAccess" method="post" enctype="multipart/form-data">
                            <div class="card-body">
                                <input name="MenuId" type="hidden" value="@ViewBag.menuId" />
                                <input name="Id" type="hidden" value="@Model.Id" />
                                @if (TempData["msg"] != null)
                                {
                                    <div class="mb-3">
                                        <div class="alert alert-success">
                                            @TempData["msg"]
                                        </div>
                                    </div>
                                }
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="row">

                                            <div class="col-md-6">
                                                <label class="form-label-title">Select Company</label>
                                                <div class="dropdown-container">
                                                    <input type="text" class="dropdown-search form-control" placeholder="Search Company..." />
                                                    <button class="dropdown-toggle form-control" type="button">--Select Company--</button>
                                                    <div class="dropdown-options">
                                                        @foreach (var company in Model.Companies)
                                                        {
                                                            <label class="dropdown-item">
                                                                <input type="checkbox" name="CompanyId" value="@company.Value" class="dropdown-checkbox" />
                                                                @company.Text
                                                            </label>
                                                        }
                                                    </div>
                                                    <span class="text-danger">@Html.ValidationMessageFor(a => a.CompanyId)</span>
                                                </div>
                                            </div>

                                            <div class="col-md-6">
                                                <label class="form-label-title">Select Employee</label>
                                                <input type="text" id="EmployeeIdhidden" hidden value="@ViewBag.EmployeeId" />
                                                @Html.DropDownListFor(a => a.EmployeeId, Enumerable.Empty<SelectListItem>(), "--Select Employee Id--",
                                                    new { @class = "form-control", @required = "required" })
                                                <span class="text-danger">@Html.ValidationMessageFor(a => a.EmployeeId)</span>
                                            </div>

                                            <div class="col-md-6">
                                                <label class="form-label-title">User Role</label>
                                                <input type="text" id="UserRoleIdhidden" hidden value="@ViewBag.UserRoleId" />
                                                @Html.DropDownListFor(a => a.UserRoleId, Enumerable.Empty<SelectListItem>(), "--Select Role--",
                                                    new { @class = "form-control", @required = "required" })
                                                <span class="text-danger">@Html.ValidationMessageFor(a => a.UserRoleId)</span>
                                            </div>
                                            <div class="row mt-3">
                                                <div class="col-md-12">
                                                    <span style="color: #365977; font-size: 13px; font-weight: 700;">
                                                        <span>Access Type :</span>
                                                        <span style="color: #547171" class="ng-binding" id="AccessTypeLabel">New</span>
                                                    </span>
                                                    <div class="form-group-profile pull-right pointer-curser">

                                                        <input type="checkbox" name="IsAllRead" value="true" id="fancy-checkbox-primary" autocomplete="off" class="ng-valid ng-dirty Activechecked" onclick="checkAllReadCheckboxes(this)">
                                                        <div class="btn-group">
                                                            <label for="fancy-checkbox-primary" style="padding: 0px 1px; font-size: 13px; margin-top: 2px;" class="btn btn-primary btn-xs">

                                                            </label>
                                                            <label for="fancy-checkbox-primary" style="padding: 0px 1px; font-size: 13px; margin-top: 2px;" class="btn btn-default active">
                                                                <i class="icon-book"></i> <b>Read All</b>
                                                            </label>
                                                        </div>
                                                        <input type="checkbox" name="IsAllWrite" value="true" id="fancy-checkbox-success" autocomplete="off" class="ng-pristine ng-valid Activechecked" onclick="checkAllWriteCheckboxes(this)">
                                                        <div class="btn-group">
                                                            <label for="fancy-checkbox-success" style="padding: 0px 1px; font-size: 13px; margin-top: 2px;" class="btn btn-success">

                                                            </label>
                                                            <label for="fancy-checkbox-success" style="padding: 0px 1px; font-size: 13px; margin-top: 2px;" class="btn btn-default active">
                                                                <i class="icon-edit"></i> <b>Write All</b>
                                                            </label>
                                                        </div>
                                                    </div>
                                                    <br>
                                                    <hr>


                                                    @if (Model != null && Model.SoftwareLinkDTO.Count() > 0)
                                                    {
                                                        int count = 0;
                                                        foreach (var item in Model.SoftwareLinkDTO)
                                                        {
                                                            count++;
                                                            <div class="module-row" onclick="toggleSection('live-tracking_@count')">

                                                                <span>@item.Title</span>
                                                                <div class="actions" style="margin-left:430px;">
                                                                    <label class="pointer-curser">
                                                                        <input name="IsReadChecked[]" type="checkbox" value="@item.Id" class="main-read-checkbox" onclick="toggleSubOptionCheckboxes('read', this); event.stopPropagation();" />
                                                                        @*<input type="checkbox" value="@item.Id" class="main-read-checkbox" onclick="toggleSubOptionCheckboxes('read', this); event.stopPropagation();" />*@
                                                                        <i class="icon-book" style="color: #245d90;"></i> <b>Read</b>
                                                                    </label>
                                                                    <label class="pointer-curser">
                                                                        <input name="IsWriteChecked[]" type="checkbox" value="@item.Id" class="main-write-checkbox" onclick="toggleSubOptionCheckboxes('write', this); event.stopPropagation();" />
                                                                        @*<input type="checkbox" value="@item.Id" class="main-write-checkbox" onclick="toggleSubOptionCheckboxes('write', this); event.stopPropagation();" />*@
                                                                        <i class="icon-edit" style="color:#188a18"></i> <b>Write</b>
                                                                    </label>
                                                                </div>
                                                            </div>
                                                            if (item.ChildMenus != null && item.ChildMenus.Count() > 0)
                                                            {
                                                                <div class="sub-options" id="live-tracking_@count" style="display: none;">
                                                                    <div class="col-md-12">
                                                                        <div class="row">
                                                                            @foreach (var menu in item.ChildMenus)
                                                                            {
                                                                                <div class="col-md-6">
                                                                                    <div class="sub-option-row">
                                                                                        <span><b>@menu.Title</b></span>

                                                                                        <div class="actions">
                                                                                            <label class="pointer-curser">
                                                                                                <input name="IsSubReadChecked[]" type="checkbox" class="read-checkbox" value="@menu.Id" onclick="toggleParentReadCheckboxFromChild(this);" />
                                                                                                @*<input type="checkbox" value="@menu.Id" class="read-checkbox" />*@
                                                                                            <i class="icon-book" style="color: #245d90;"></i>Read
                                                                                            </label>
                                                                                            <label class="pointer-curser">
                                                                                                <input name="IsSubWriteChecked[]" type="checkbox" value="@menu.Id" class="write-checkbox" onclick="syncReadCheckbox(this);" />
                                                                                                @*<input type="checkbox" value="@menu.Id" class="write-checkbox" onclick="syncReadCheckbox(this);" />*@
                                                                                            <i class="icon-edit" style="color:#188a18"></i>Write
                                                                                            </label>
                                                                                        </div>
                                                                                    </div>
                                                                                </div>
                                                                            }
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            }
                                                        }
                                                    }

                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer text-end">
                                <button type="submit" class="btn btn-primary">@ViewBag.BtnTXT</button>
                                <button type="reset" class="btn btn-outline-primary">Reset</button>
                            </div>
                        </form>



                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

<script>
    // Toggle section visibility and ensure only one section is open
    function toggleSection(sectionId) {
        // Close all other sections
        const allSections = document.querySelectorAll('.sub-options');
        allSections.forEach(section => {
            if (section.id !== sectionId) {
                section.style.display = 'none';
            }
        });

        // Toggle the clicked section
        const section = document.getElementById(sectionId);
        if (section) {
            section.style.display = section.style.display === 'none' ? 'block' : 'none';
        }
    }

    // Toggle checkboxes for sub-options based on main checkbox
    function toggleSubOptionCheckboxes(type, mainCheckbox) {
        const subCheckboxes = document.querySelectorAll(`.${type}-checkbox`);
        subCheckboxes.forEach(checkbox => {
            checkbox.checked = mainCheckbox.checked;
        });
    }

    // Automatically check the "Read" checkbox when "Write" is checked
    function syncReadCheckbox(writeCheckbox) {
        const readCheckbox = writeCheckbox.closest('.sub-option-row').querySelector('.read-checkbox');
        if (writeCheckbox.checked) {
            readCheckbox.checked = true;
        }
    }

    // When "Read All" is clicked, check all read checkboxes in main and sub-sections
    function checkAllReadCheckboxes(mainCheckbox) {
        const allReadCheckboxes = document.querySelectorAll('.read-checkbox, .main-read-checkbox');
        allReadCheckboxes.forEach(checkbox => {
            checkbox.checked = mainCheckbox.checked;
        });
    }

    // When "Write All" is clicked, check all write checkboxes in main and sub-sections
    function checkAllWriteCheckboxes(mainCheckbox) {
        const allWriteCheckboxes = document.querySelectorAll('.write-checkbox, .main-write-checkbox');
        allWriteCheckboxes.forEach(checkbox => {
            checkbox.checked = mainCheckbox.checked;
        });

        // If all write checkboxes are checked, check all the read checkboxes as well
        const allWriteCheckboxesChecked = Array.from(allWriteCheckboxes).every(checkbox => checkbox.checked);
        if (allWriteCheckboxesChecked) {
            const allReadCheckboxes = document.querySelectorAll('.read-checkbox, .main-read-checkbox');
            allReadCheckboxes.forEach(checkbox => {
                checkbox.checked = true;
            });
        }
    }
</script>

<script>
    $(document).ready(function () {
        // Handle single selection for checkboxes
        $(".dropdown-checkbox").change(function () {
            if (this.checked) {
                // Uncheck all other checkboxes
                $(".dropdown-checkbox").not(this).prop("checked", false);

                // Update the dropdown toggle text to the selected company name
                const selectedText = $(this).parent().text().trim();
                $(".dropdown-toggle").text(selectedText);

                // Trigger dependent dropdown updates
                const selectedCompanyId = this.value;
                updateEmployeeDropdown(selectedCompanyId);
                updateUserRoleDropdown(selectedCompanyId);
            } else {
                // Reset dropdown toggle text if no company is selected
                $(".dropdown-toggle").text("--Select Company--");
            }
        });

        // Fetch and populate EmployeeId dropdown
        function updateEmployeeDropdown(companyId) {
            $.get('/Common/GetEmployeeIdByCompany', { companyId: companyId }, function (data) {
                const employeeDropdown = $("#EmployeeId");
                employeeDropdown.empty().append('<option value="">--Select Employee Id--</option>');
                data.forEach(employee => {
                    employeeDropdown.append(`<option value="${employee.Id}">${employee.Employee_Id}</option>`);
                });
                employeeDropdown.val($("#EmployeeIdhidden").val());
            });
        }

        // Fetch and populate UserRoleId dropdown
        function updateUserRoleDropdown(companyId) {
            $.get('/Common/GetUserRoleByCompany', { companyId: companyId }, function (data) {
                const roleDropdown = $("#UserRoleId");
                roleDropdown.empty();
                // roleDropdown.empty().append('<option value="">--Select Role--</option>');
                data.forEach(role => {
                    roleDropdown.append(`<option value="${role.Id}">${role.RoleName}</option>`);
                });
                roleDropdown.val($("#UserRoleIdhidden").val());
            });
        }

        // Initialize dropdowns with hidden values
        const initialCompanyId = $(".dropdown-checkbox:checked").val();
        if (initialCompanyId) {
            updateEmployeeDropdown(initialCompanyId);
            updateUserRoleDropdown(initialCompanyId);
        }

        // Company dropdown behavior
        const dropdownContainer = $(".dropdown-container");
        $(".dropdown-toggle").click(() => dropdownContainer.toggleClass("open"));
        $(document).click(event => {
            if (!$(event.target).closest(".dropdown-container").length) {
                dropdownContainer.removeClass("open");
            }
        });

        // Search functionality
        $(".dropdown-search").on("input", function () {
            const filter = this.value.toLowerCase();
            $(".dropdown-item").each(function () {
                const text = $(this).text().toLowerCase();
                $(this).toggle(text.includes(filter));
            });
        });
    });


</script>

<script>
    $(document).ready(function () {
        $('#UserRoleId').change(function () {
            var roleId = $(this).val();
            var namerole = $("#UserRoleId option:selected").text();
            //var getrolevalue = document.getElementById('UserRoleId').selectedOptions[0].value;
            $("#AccessTypeLabel").empty();
            $("#AccessTypeLabel").text(namerole);
            if (roleId) {
                $.ajax({
                    url: '/AdministratorETS/GetDataByRoleId',
                    type: 'GET',
                    data: { roleId: roleId },
                    success: function (data) {
                        const isReadChecked = data.IsReadChecked || [];
                        const isWriteChecked = data.IsWriteChecked || [];
                        const isSubReadChecked = data.IsSubReadChecked || [];
                        const isSubWriteChecked = data.IsSubWriteChecked || [];

                        CheckAllRead(data.IsAllRead);
                        CheckAllWrite(data.IsAllWrite);

                        // Check parent-level read and write checkboxes
                        checkCheckboxes(isReadChecked, "main-read-checkbox");
                        checkCheckboxes(isWriteChecked, "main-write-checkbox");

                        // Check sub-level read and write checkboxes
                        checkCheckboxes(isSubReadChecked, "read-checkbox");
                        checkCheckboxes(isSubWriteChecked, "write-checkbox");
                    },
                    error: function () {
                        alert('Error fetching data.');
                    }
                });
            }
        });

        // Function to check checkboxes by class name and array of values
        function checkCheckboxes(array, className) {
            array.forEach(function (value) {
                const checkbox = $(`input.${className}[value="${value}"]`);
                if (checkbox.length) {
                    checkbox.prop('checked', true);
                }
            });
        }

        // Function to check/uncheck all read checkboxes
        function CheckAllRead(isAllRead) {
            $('.Activechecked').prop('checked', isAllRead);
        }

        // Function to check/uncheck all write checkboxes
        function CheckAllWrite(isAllWrite) {
            $('.Activechecked').prop('checked', isAllWrite);
        }
    });

</script>