@model Dictionary<string, List<VardaanCab.Domain.DTO.EmployeeGroup>>
@{
    ViewBag.Title = "RoutingList";
    Layout = "~/Views/Shared/New_Master/_FinelAdminLayout.cshtml";
    var jsonData = Json.Encode(Model);
}

<style>
    /* Word wrap for long text in table cells */
    .wrap-cell {
        word-wrap: break-word;
        word-break: break-word;
        overflow-wrap: break-word;
        max-width: 200px;
        white-space: normal;
    }

    /* Route header styles */
    .route-header {
        background-color: #f8f9fa;
        padding: 10px;
        border: 1px solid #ddd;
        margin-bottom: 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 16px;
        font-weight: bold;
        border-radius: 5px;
    }

        /* Details container inside route header */
        .route-header .details {
            display: flex;
            gap: 15px;
            flex-wrap: wrap; /* Makes it responsive */
        }

            .route-header .details span {
                display: inline-block;
            }

        /* Actions button container */
        .route-header .actions {
            display: flex;
            gap: 10px;
        }

    /* Sticky header */
    .sticky-header {
        position: sticky;
        top: 0;
        z-index: 1000;
        background-color: #f8f9fa;
        border-bottom: 1px solid #ddd;
        padding: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        font-size: 14px;
        font-weight: bold;
    }

        /* Sticky header details */
        .sticky-header .details {
            display: flex;
            align-items: center;
            gap: 15px;
            font-size: 14px;
        }

    .edit-icon {
        margin-right: 10px;
        cursor: pointer;
    }

    /* Scrollable data container */
    .scrollable-container {
        overflow-y: auto;
        max-height: 400px;
        margin-top: 15px;
        padding: 10px;
        background-color: #f9f9f9;
        border-radius: 5px;
    }

    /* Table styling */
    #data-container table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    /* Table headers and data cells */
    #data-container th, #data-container td {
        padding: 12px 15px;
        text-align: left;
        border-left: 2px solid #ddd; /* Vertical border for column separation */
        border-top: 2px solid #ddd; /* Horizontal border for row separation */
        font-size: 14px;
    }

        /* Remove left border for the first column (optional) */
        #data-container th:first-child, #data-container td:first-child {
            border-left: none;
        }

    /* Table header styling */
    #data-container th {
        background-color: #f1f1f1;
        font-weight: bold;
        color: #333;
        border-top: 2px solid #ddd;
        border-left: 2px solid #ddd;
    }

    /* Table row hover effect */
    #data-container tbody tr:hover {
        background-color: #f1f1f1;
        cursor: pointer;
    }

    /* Table cell on hover */
    #data-container td:hover {
        background-color: #e9ecef;
    }

    /* Actions button in route header */
    .route-header .actions button {
        background-color: #007bff;
        color: white;
        padding: 5px 10px;
        border: none;
        border-radius: 3px;
        cursor: pointer;
    }

        /* Button hover effect */
        .route-header .actions button:hover {
            background-color: #0056b3;
        }

    /* Wrap cell with long text */
    .wrap-cell {
        max-width: 200px;
        word-wrap: break-word;
    }
</style>
<!-- CSS for Map Modal -->
<style>
    .modal1 {
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
        display: none; /* Hidden by default */
    }

    .modal-content1 {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border-radius: 10px;
        width: 50%;
        position: relative;
    }

    .close-btn {
        position: absolute;
        top: 10px;
        right: 20px;
        color: #aaa;
        font-size: 24px;
        font-weight: bold;
        cursor: pointer;
    }

        .close-btn:hover {
            color: red;
        }
</style>


<div class="pcoded-content">
    <div class="pcoded-inner-content">
        <div class="main-body">
            <div class="page-wrapper">
                <div class="card bread">
                    <div class="card-body">
                        <h5>Routing List</h5>
                        <div class="page-header-breadcrumb">
                            <ul class="breadcrumb">
                                <li class="breadcrumb-item">
                                    <a href="#!">
                                        <i class="fa fa-home"></i>
                                    </a>
                                </li>
                                <li class="breadcrumb-item">
                                    <a href="#!">ETS</a>
                                </li>
                                <li class="breadcrumb-item">
                                    <a href="#!">RoutingList</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="page-body">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="card">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h5>Routing List</h5>
                                </div>
                                <div class="card-block">
                                    <div class="sticky-header">
                                        <div class="details group mb-4" id="route-summary">

                                        </div>
                                    </div>

                                    <!-- Data Container -->
                                    <div id="data-container" class="scrollable-container"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Location Modal Structure -->
<div id="mapModal" class="modal1" style="display: none;">
    <div class="modal-content1">
        <span class="close-btn">&times;</span>
        <h4>Route Map</h4>
        <div id="map" style="height: 400px; width: 100%; border-radius: 10px;"></div>
    </div>

</div>
<!--Edit modal-->
<div class="modal fade" id="default-Modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Edit Bucket</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <label class="form-label-title">Select Driver</label>
                        <select name="DriverId" id="driver-dropdown" class="form-control" required>
                            <option value="0">--Select Driver--</option>
                            @foreach (var item in @ViewBag.DriverItems)
                            {
                                <option value="@item.Value">@item.Text</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label-title">Vehicle Number</label>
                        <select name="VehicleNumber" id="vehicle-dropdown" class="form-control" required>
                            <option value="0">--Select--</option>
                            @foreach (var item in @ViewBag.VehicleNumItems)
                            {
                                <option value="@item.Value">@item.Text</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label-title">Device Id</label>
                        <select name="DeviceId" id="device-dropdown" class="form-control" required>
                            <option value="0">--Select--</option>
                            @foreach (var item in @ViewBag.DeviceIdItems)
                            {
                                <option value="@item.Value">@item.Text</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label-title">Escort</label>
                        <select name="VehicleNumber" id="escort-dropdown" class="form-control" required>
                            <option value="0">--Select--</option>
                            @foreach (var item in @ViewBag.EscortItems)
                            {
                                <option value="@item.Value">@item.Text</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default waves-effect " data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary waves-effect waves-light ">Save changes</button>
            </div>
        </div>
    </div>
</div>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $(document).ready(function () {
        // When driver is selected, auto-select vehicle and device
        $("#driver-dropdown").change(function () {
            var driverId = $(this).val();
            if (driverId != "0") {
                $.ajax({
                    url: '/ETS/GetVehicleByDriver',
                    type: 'GET',
                    data: { driverId: driverId },
                    success: function (response) {
                        if (response.vehicleId !== 0) {
                            $("#vehicle-dropdown").val(response.vehicleId);
                        } else {
                            $("#vehicle-dropdown").val("0");
                        }
                    }
                });

                $.ajax({
                    url: '/ETS/GetDriverDeviceIdByDriver',
                    type: 'GET',
                    data: { driverId: driverId },
                    success: function (response) {
                        if (response.deviceId !== 0) {
                            $("#device-dropdown").val(response.deviceId);
                        } else {
                            $("#device-dropdown").val("0");
                        }
                    }
                });
            }
        });

        // When vehicle is selected, auto-select driver and device
        $("#vehicle-dropdown").change(function () {
            var vehicleId = $(this).val();
            if (vehicleId != "0") {
                $.ajax({
                    url: '/ETS/GetDriverByVehicle',
                    type: 'GET',
                    data: { vehicleId: vehicleId },
                    success: function (response) {
                        if (response.driverId !== 0) {
                            $("#driver-dropdown").val(response.driverId);
                        } else {
                            $("#driver-dropdown").val("0");
                        }
                    }
                });

                $.ajax({
                    url: '/ETS/GetDriverDeviceIdByVehicle',
                    type: 'GET',
                    data: { vehicleId: vehicleId },
                    success: function (response) {
                        if (response.deviceId !== 0) {
                            $("#device-dropdown").val(response.deviceId);
                        } else {
                            $("#device-dropdown").val("0");
                        }
                    }
                });
            }
        });

        // When device is selected, auto-select driver and vehicle
        $("#device-dropdown").change(function () {
            var deviceId = $(this).val();
            if (deviceId != "0") {
                $.ajax({
                    url: '/ETS/GetDriverByDeviceId',
                    type: 'GET',
                    data: { deviceId: deviceId },
                    success: function (response) {
                        if (response.driverId !== 0) {
                            $("#driver-dropdown").val(response.driverId);
                        } else {
                            $("#driver-dropdown").val("0");
                        }
                    }
                });

                $.ajax({
                    url: '/ETS/GetVehicleByDeviceId',
                    type: 'GET',
                    data: { deviceId: deviceId },
                    success: function (response) {
                        if (response.vehicleId !== 0) {
                            $("#vehicle-dropdown").val(response.vehicleId);
                        } else {
                            $("#vehicle-dropdown").val("0");
                        }
                    }
                });
            }
        });

        // Reset dropdowns when modal is closed
        $("#default-Modal").on("hidden.bs.modal", function () {
            $("#driver-dropdown").val("0");
            $("#vehicle-dropdown").val("0");
            $("#device-dropdown").val("0");
        });
    });
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBrbWFXlOYpaq51wteSyFS2UjdMPOWBlQw"></script>

<script>
    let map;

    function initMap(comlat, comlong, employeeDataList) {
        // Initialize the map
        map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: comlat, lng: comlong },
            zoom: 10,
        });

        // Company location (final destination)
        const companyLocation = { lat: comlat, lng: comlong };

        // Employee locations (pick-up points)
        const employeeLocations = employeeDataList.map(emp => ({
            lat: emp.employeeLatitude,
            lng: emp.employeeLongitude
        }));

        // Add the company marker with a car icon
        const companyMarker = new google.maps.Marker({
            position: companyLocation,
            map: map,
            title: 'Company Location',
            icon: {
                url: 'https://maps.google.com/mapfiles/ms/micons/cabs.png', // URL to car icon
                scaledSize: new google.maps.Size(32, 32), // Adjust the size of the icon
            }
        });

        // Draw the route from employees to the company
        displayRoute(employeeLocations, companyLocation);

        // Add employee markers with user icon
        employeeDataList.forEach(emp => {
            new google.maps.Marker({
                position: { lat: emp.employeeLatitude, lng: emp.employeeLongitude },
                map: map,
                title: emp.employeeName,
                icon: {
                    url: 'https://maps.google.com/mapfiles/ms/micons/man.png', // URL to user icon
                    scaledSize: new google.maps.Size(32, 32), // Adjust the size of the icon
                }
            });
        });
    }

    function displayRoute(employeeLocations, companyLocation) {
        const directionsService = new google.maps.DirectionsService();
        const directionsRenderer = new google.maps.DirectionsRenderer({
            map: map,
            suppressMarkers: true, // Disable default markers
            polylineOptions: {
                strokeColor: "#4285F4", // Google blue for the route
            },
        });

        // Convert employee locations to waypoints
        const waypoints = employeeLocations.map((location) => ({
            location: location,
            stopover: true, // Each location is a stopover point
        }));

        // Calculate the route
        directionsService.route(
            {
                origin: waypoints[0].location, // First employee as the starting point
                destination: companyLocation, // Company as the destination
                waypoints: waypoints.slice(1), // Remaining employees as waypoints
                travelMode: google.maps.TravelMode.DRIVING, // Mode of travel
                optimizeWaypoints: true, // Optimize route for shortest travel time
            },
            (response, status) => {
                if (status === "OK") {
                    directionsRenderer.setDirections(response);

                    // Display total distance and time
                    const route = response.routes[0];
                    const summary = route.legs.reduce(
                        (acc, leg) => {
                            acc.distance += leg.distance.value;
                            acc.duration += leg.duration.value;
                            return acc;
                        },
                        { distance: 0, duration: 0 }
                    );
                    // Optionally, log the total distance and duration
                    // console.log(
                    //     `Total Distance: ${(summary.distance / 1000).toFixed(2)} km`
                    // );
                    // console.log(
                    //     `Total Duration: ${(summary.duration / 60).toFixed(2)} mins`
                    // );
                } else {
                    console.error("Directions request failed due to " + status);
                }
            }
        );
    }
</script>


<!-- JavaScript for Modal -->
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const modal = document.getElementById('mapModal');
        const closeBtn = modal.querySelector('.close-btn');
        let map; // Declare map variable outside the function scope
        let markers = []; // Store map markers for clearing later
        let directionsService;
        let directionsRenderer;

        // Function to clear all markers
        function clearMarkers() {
            markers.forEach(marker => marker.setMap(null));
            markers = [];
        }

        function initializeMap(startLat, startLng, employees) {
            // Initialize the map centered at the start location (company coordinates)
            map = new google.maps.Map(modal.querySelector('#map'), {
                center: { lat: startLat, lng: startLng },
                zoom: 12,
            });

            // Create a marker for the company location
            const companyMarker = new google.maps.Marker({
                position: { lat: startLat, lng: startLng },
                map: map,
                title: 'Company Location',
            });

            // Place a marker for each employee's location
            employees.forEach(employee => {
                const employeeMarker = new google.maps.Marker({
                    position: { lat: employee.employeeLatitude, lng: employee.employeeLongitude },
                    map: map,
                    title: employee.employeeName,
                });
            });

            // Initialize the Directions Service and Renderer
            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer({
                map: map,
            });

            // Request for directions from each employee to the company
            employees.forEach(employee => {
                const request = {
                    origin: { lat: employee.employeeLatitude, lng: employee.employeeLongitude }, // Employee's location is the origin
                    destination: { lat: startLat, lng: startLng }, // Company location is the destination
                    travelMode: google.maps.TravelMode.DRIVING, // You can change this to WALKING, BICYCLING, etc.
                };

                // Call the directions service to get a route
                directionsService.route(request, (response, status) => {
                    if (status === google.maps.DirectionsStatus.OK) {
                        directionsRenderer.setDirections(response);
                    } else {
                        alert('Directions request failed due to ' + status);
                    }
                });
            });
        }

        document.addEventListener('click', async (e) => {
            if (e.target.classList.contains('fa-map-marker')) {
                const group = e.target.getAttribute('data-group');
                for (const key in data) {
                    if (key === group) {
                        const matchingGroupData = data[key];

                        const companyLatitude = matchingGroupData[0].ComLatitude;
                        const companyLongitude = matchingGroupData[0].ComLongitude;

                        const employeeDataList = matchingGroupData.map(emp => {
                            const CompanyLat = companyLatitude;
                            const CompanyLong = companyLongitude;
                            const EmpLat = parseFloat(emp.Latitude);
                            const EmpLng = parseFloat(emp.Longitude);

                            return {
                                employeeId: emp.Id,
                                employeeName: emp.Name,
                                companyLatitude: CompanyLat,
                                companyLongitude: CompanyLong,
                                employeeLatitude: EmpLat,
                                employeeLongitude: EmpLng
                            };
                        });

                        // Now you have a list of employee data
                        console.log(employeeDataList);

                        // Initialize the map with the company location and the employee list
                        //initializeMap(companyLatitude, companyLongitude, employeeDataList);
                        initMap(companyLatitude, companyLongitude, employeeDataList)
                        break;
                    }
                }

                // Show the modal
                modal.style.display = 'block';
            }
        });

        // Close modal on close button click
        closeBtn.addEventListener('click', () => {
            modal.style.display = 'none';
            clearMarkers(); // Clear markers when modal is closed
        });

        // Close modal when clicking outside the modal content
        window.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.style.display = 'none';
                clearMarkers(); // Clear markers when modal is closed
            }
        });
    });
</script>
<script>
    // Embed the JSON data into the script
    const data = @Html.Raw(jsonData);
    const container = document.getElementById('data-container');
    const routeSummaryElement = document.getElementById('route-summary');

    // Variables for totals
    let totalEmployees = 0;
    let escortRequired = 0;
    let maleCount = 0;
    let femaleCount = 0;
    let totalOnBoard = 0;
    let yetToBoard = 0;

    // Set to track unique groups
    const uniqueGroups = new Set();

    // Loop through each group in the data
    for (const group in data) {
        const groupData = data[group];
        const groupZoneWise = groupData[0].ZoneWise;
        const routeId = groupData[0].Group ?? 'N/A'; // Example: Replace with actual property
        const availableSeats = groupData[0].missingEmployees ?? 'N/A'; // Example
        const CabNumber = groupData[0].CabNumber ?? 'N/A'; // Example

        // Add the group to the uniqueGroups set (this will ensure each group is counted only once)
        uniqueGroups.add(group);

        // Create a container for the group
        const groupDiv = document.createElement('div');
        groupDiv.className = 'group mb-4';

        // Add the route header
        const routeHeader = document.createElement('div');
        routeHeader.className = 'route-header';
        routeHeader.innerHTML = `
            <div class="details">
                <label>
                    <input type="checkbox" id="select-all-${group}" />
                </label>
                <span>Route Name: ${groupZoneWise}</span>
                Route ID: ${routeId}
                <i class="fa fa-map-marker" aria-hidden="true" data-group="${group}" style="cursor: pointer; color:skyblue;"></i></span>
                <span>Available Seats: ${availableSeats}</span>
                <span>${CabNumber}</span>
                <button class="btn btn-sm btn-warning">Leave</button>
            </div>
            <div class="actions">
              <button type="button" class="btn btn-default waves-effect" data-toggle="modal" data-target="#default-Modal"><i class="fa fa-edit"></i></button>
            </div>
        `;



        groupDiv.appendChild(routeHeader);

        // Create the table
        const table = document.createElement('table');
        table.className = 'table table-striped table-bordered';

        const thead = document.createElement('thead');
        thead.innerHTML = `
            <tr>
                <th>Employee ID</th>
                <th>Name</th>
                <th>Gender</th>
                <th>Company ID</th>
                <th>Pickup/Drop Location</th>
                <th>Status</th>
                <th>Area</th>
                <th>Pick-up Time</th>
                <th>No Show</th>
                <th>Delete</th>
            </tr>
        `;
        table.appendChild(thead);

        const tbody = document.createElement('tbody');
        groupData.forEach(employee => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${employee.Employee_Id}</td>
                <td>${employee.Name}</td>
                <td>${employee.Gender}</td>
                <td>${employee.CompanyName}</td>
                <td class="wrap-cell" title="${employee.PickupandDropAddress}">${employee.PickupandDropAddress}</td>
                <td>${employee.Status ?? 'N/A'}</td>
                <td>${employee.DestinationAreaWise}</td>
                <td>${employee.PickupTime ?? 'N/A'}</td>
                <td><input type="checkbox"></td>
                <td><i class="fa fa-trash delete-icon"></i></td>
            `;
            tbody.appendChild(row);

            // Update totals based on the employee data
            totalEmployees++;
            if (employee.EscortRequired) escortRequired++;
            if (employee.Gender === "male" || employee.Gender === "Male" || employee.Gender === "MALE")maleCount++;
            if (employee.Gender === "female" || employee.Gender === "Female" || employee.Gender === "FEMALE")femaleCount++;
            if (employee.Status === 'OnBoard') totalOnBoard++;
            if (employee.Status === 'Yet To Board') yetToBoard++;
        });
        table.appendChild(tbody);

        // Append the table to the group container
        groupDiv.appendChild(table);

        // Append the group container to the main container
        container.appendChild(groupDiv);
    }

    // Update the sticky header with the totals
    routeSummaryElement.innerHTML = `
        <i class="edit edit-icon"></i>
        <span>Route Summary - ${uniqueGroups.size}/${uniqueGroups.size}</span> |
        <span>Total Employees - ${totalEmployees}</span> |
        <span>Escort Required - ${escortRequired}</span> |
        <span>Male - ${maleCount}</span> |
        <span>Female - ${femaleCount}</span> |
        <span>Total OnBoard - ${totalOnBoard}</span> |
        <span>Yet To Board - ${yetToBoard}</span>
    `;
</script>

