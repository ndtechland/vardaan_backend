@model VardaanCab.Domain.DTO.CreateRequestDTO
@{
    ViewBag.Title = "CreateRequest";
    Layout = "~/Views/Shared/New_Master/_FinelAdminLayout.cshtml";
}


<style>
    .import-row {
        display: flex;
        flex-direction: column; /* Stack the divs vertically */
        align-items: flex-end; /* Align all child elements to the right */
        width: 100%; /* Ensure full width */
    }

        .import-row .col-md-12 {
            text-align: right; /* Align text content to the right */
            margin-bottom: 15px; /* Space between sections */
        }

    /* Ensure that the import form container is aligned to the right side */
    .import-form-container {
        display: flex;
        justify-content: flex-end; /* Align file input and button to the right */
        align-items: center; /* Vertically center the file input and button */
        width: 100%; /* Ensure the container takes up the full width */
    }

        /* Optional: Add space between file input and button */
        .import-form-container .col-md-7,
        .import-form-container .col-md-2 {
            margin-left: 10px; /* Adds space between the file input and the button */
        }
</style>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var message = "@TempData["Message"]";
        if (message != null) {
            if (message) {
                let alertText;

                alertText = "@TempData["Message"]";

                Swal.fire({
                    title: 'Success',
                    text: alertText,
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then((result) => {
                    if (result.isConfirmed) {
                        setTimeout(function () {
                            window.location.href = '@Url.Action("EmployeeRequestList", "ETS")';
                        }, 1000);
                    }
                });
            }
        }
    });
</script>
<div class="pcoded-content">

    <!-- Page-header end -->
    <div class="pcoded-inner-content">
        <!-- Main-body start -->
        <div class="main-body">
            <div class="page-wrapper">
                <div class="card">
                    <div class="card-block">
                        <h5>Create Request</h5>
                        <div class="page-header-breadcrumb">
                            <ul class="breadcrumb">
                                <li class="breadcrumb-item">
                                    <a href="#!">
                                        <i class="fa fa-home"></i>
                                    </a>
                                </li>
                                <li class="breadcrumb-item">
                                    <a href="#!">ETS</a>
                                </li>
                                <li class="breadcrumb-item">
                                    <a href="#!">Create Request</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
                <!-- Page body start -->
                <div class="page-body">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <!-- Heading -->
                                    <h5>@ViewBag.Heading</h5>

                                    <!-- Import and Export Section -->
                                    <div class="d-flex align-items-center">
                                        <!-- Export Section -->
                                        <b class="mr-2">Import To Excel Format:</b>
                                        <a href="@Url.Action("ExportToExcel", "ETS")" class="btn btn-link">
                                            <img src="~/files/assets/images/Export-Image.png" alt="Export" class="img-fluid" style="height: 42px; width: 108px;" />
                                        </a>

                                        <!-- Import Form -->
                                        @using (Html.BeginForm("ImportEmployeeRequestData", "ETS", FormMethod.Post, new { enctype = "multipart/form-data" }))
                                        {
                                            <div class="d-flex align-items-center ml-3">
                                                <input type="file" class="form-control-file mr-2" name="file" required style="width: 200px;" />
                                                <button type="submit" class="btn btn-primary btn-sm">Import</button>
                                            </div>
                                        }
                                    </div>
                                </div>
                                @if (TempData["msg"] != null)
                                {
                                    <div class="row r">
                                        <div class="col-md-12">
                                            <div class="alert alert-success">
                                                @TempData["msg"]
                                            </div>
                                        </div>
                                    </div>
                                }
                                <div class="card-block">
                                    <form class="theme-form mega-form" action="CreateRequest" method="post" enctype="multipart/form-data">

                                        <input name="MenuId" type="hidden" value="@ViewBag.menuId" />
                                        <input name="Id" type="hidden" value="@Model.Id" />
                                        @if (TempData["msg"] != null)
                                        {
                                            <div class="mb-3">
                                                <div class="alert alert-success">
                                                    @TempData["msg"]
                                                </div>
                                            </div>
                                        }
                                        @if (TempData["errormsg"] != null)
                                        {
                                            <div class="mb-3">
                                                <div class="alert alert-danger">
                                                    @TempData["errormsg"]
                                                </div>
                                            </div>
                                        }
                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <label class="form-label-title ">Request Type</label>
                                                        <select name="RequestType" id="RequestType" class="form-control">
                                                            <option value="">--Select Request Type--</option>
                                                            <option value="SELF" @(Model.RequestType == "SELF" ? "selected" : "")>SELF</option>
                                                            <option value="EMPLOYEE" @(Model.RequestType == "EMPLOYEE" ? "selected" : "")>EMPLOYEE</option>
                                                            <option value="GUEST" @(Model.RequestType == "GUEST" ? "selected" : "")>GUEST</option>

                                                        </select>
                                                    </div>

                                                    <div class="col-md-6">
                                                        <label class="form-label-title ">Select Company</label>
                                                        @Html.DropDownListFor(a => a.CompanyId, Model.Companies, "--Select Company--", new { @class = "form-control", @required = "" })
                                                        <span class="text-danger">
                                                            @Html.ValidationMessageFor(a => a.CompanyId)
                                                        </span>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <label class="form-label-title ">Employee Id</label>
                                                        @Html.TextBoxFor(a => a.EmployeeId, new { @class = "form-control", id = "employeeId", placeholder = "Employee Id" })
                                                    </div>
                                                    <div class="col-md-3">
                                                        <label class="form-label-title ">First Name</label>
                                                        @Html.TextBoxFor(a => a.FirstName, new { @class = "form-control", id = "firstName", placeholder = "Employee First Name", @readonly = "true" })
                                                    </div>
                                                    <div class="col-md-3">
                                                        <label class="form-label-title ">Last Name</label>
                                                        @Html.TextBoxFor(a => a.LastName, new { @class = "form-control", id = "lastName", placeholder = "Employee Last Name", @readonly = "true" })
                                                    </div>
                                                    <div class="col-md-3">
                                                        <label class="form-label-title ">Gender</label>
                                                        <select id="gender" name="Gender" style="pointer-events: none; background-color: #e9ecef;"
                                                                class="form-control" readonly>
                                                            <option value="">--Select Gender--</option>
                                                            <option value="Male" @(Model.Gender == "Male" ? "selected" : "")>Male</option>
                                                            <option value="Female" @(Model.Gender == "Female" ? "selected" : "")>Female</option>
                                                            <option value="Other" @(Model.Gender == "Other" ? "Other" : "")>Other</option>


                                                        </select>
                                                    </div>
                                                    <div class="col-md-3">
                                                        <label class="form-label-title ">Email</label>
                                                        @Html.TextBoxFor(a => a.Email, new { @class = "form-control", id = "email", placeholder = "Employee Email", @readonly = "true" })
                                                    </div>
                                                    <div class="col-md-6">
                                                        <label class="form-label-title ">Guest Contact Number With Country Code</label>
                                                        @Html.TextBoxFor(a => a.GuestContact, new { @class = "form-control", id = "guestContact", placeholder = "eg.919999999999", @readonly = "true" })
                                                    </div>

                                                    <div class="col-md-3">
                                                        <div class="guestpart">
                                                            <label class="form-label-title ">Unit (ASPL/AZTEC)</label>
                                                            <select name="Unit" id="unit" class="form-control">
                                                                <option value="ASPL" @(Model.Unit == "ASPL" ? "ASPL" : "")>ASPL</option>
                                                                <option value="AZTEC" @(Model.Unit == "AZTEC" ? "AZTEC" : "")>AZTEC</option>
                                                            </select>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-3">
                                                        <div class="guestpart">
                                                            <label class="form-label-title ">Department</label>
                                                            @Html.TextBoxFor(a => a.Department, new { @class = "form-control", id = "department", placeholder = "Enter Department" })
                                                        </div>


                                                    </div>
                                                    <div class="col-md-3">
                                                        <div class="guestpart">
                                                            <label class="form-label-title ">Cost Centre</label>
                                                            @Html.TextBoxFor(a => a.CostCentre, new { @class = "form-control", placeholder = "Cost Centre" })

                                                        </div>

                                                    </div>
                                                    <div class="col-md-3">
                                                        <div class="guestpart">
                                                            <label class="form-label-title ">Expence Code</label>
                                                            @Html.TextBoxFor(a => a.ExpenseCode, new { @class = "form-control", placeholder = "Expence Code" })
                                                        </div>

                                                    </div>
                                                    <div class="col-md-3">
                                                        <div class="guestpart">
                                                            <label class="form-label-title ">Requestor Emp ID</label>
                                                            @Html.TextBoxFor(a => a.RequestorEmpId, new { @class = "form-control", placeholder = "Requestor Emp ID" })
                                                        </div>

                                                    </div>
                                                    <div class="col-md-3">
                                                        <div class="guestpart">
                                                            <label class="form-label-title ">Requestor Name</label>
                                                            @Html.TextBoxFor(a => a.RequestorName, new { @class = "form-control", placeholder = "Requestor Name" })
                                                        </div>

                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="guestpart">
                                                            <label class="form-label-title ">Requestor Contact No. Comma Separated</label>
                                                            @Html.TextBoxFor(a => a.RequestorContacts, new { @class = "form-control", placeholder = "Eg.919811172193,919999999999" })
                                                        </div>

                                                    </div>
                                                    <div class="col-md-3">
                                                        <div class="guestpart">
                                                            @*<label class="form-label-title ">Date of Booking Received</label>*@
                                                            <label class="form-label-title ">Booking Received Date</label>
                                                            @Html.TextBoxFor(a => a.BookingReceivedDate, "{0:yyyy-MM-dd}", new { @class = "form-control", placeholder = "Date of Booking Received", type = "Date" })
                                                        </div>

                                                    </div>
                                                    <div class="col-md-3">
                                                        <div class="guestpart">
                                                            <label class="form-label-title ">Request Trip Type</label>
                                                            <select name="RequestTripType" id="requesttripType" class="form-control">
                                                                <option value="1" @(Model.RequestTripType == "1" ? "selected" : "")>Airport Pickup</option>
                                                                <option value="2" @(Model.RequestTripType == "2" ? "selected" : "")>Airport Drop</option>
                                                                <option value="3" @(Model.RequestTripType == "3" ? "selected" : "")>Medical Emergency</option>
                                                                <option value="4" @(Model.RequestTripType == "4" ? "selected" : "")>Office Transfer</option>
                                                                <option value="5" @(Model.RequestTripType == "5" ? "selected" : "")>Hotel Transfer</option>
                                                                <option value="6" @(Model.RequestTripType == "6" ? "selected" : "")>Railway Station Pickup</option>
                                                                <option value="7" @(Model.RequestTripType == "7" ? "selected" : "")>Administration</option>
                                                            </select>
                                                        </div>

                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="guestpart">
                                                            <label class="form-label-title ">Destination Request Method</label>
                                                            <select name="DestinationRequestMethod" class="form-control" disabled>
                                                                <option value="Single" @(Model.DestinationRequestMethod == "Single" ? "selected" : "")>Single</option>
                                                                <option value="Multiple" @(Model.DestinationRequestMethod == "Multiple" ? "selected" : "")>Multiple</option>
                                                            </select>
                                                        </div>

                                                    </div>

                                                    <div class="col-md-6">
                                                        <div class="guestpart">
                                                            <label class="form-label-title ">Location Types</label>
                                                            <select name="LocationType" id="locationType" class="form-control">
                                                                <option value="">Select Location Type</option>
                                                                <option value="Multiple Location" @(Model.LocationType == "Multiple Location" ? "selected" : "")>Multiple Location</option>
                                                                <option value="Single Location" @(Model.LocationType == "Single Location" ? "selected" : "")>Single Location</option>
                                                            </select>
                                                        </div>

                                                    </div>

                                                    <div class="col-md-6">
                                                        <div class="guestpart">
                                                            <div id="smstriggerlocation">
                                                                <label class="form-label-title ">SMS Triggered Location</label>
                                                                @Html.TextBoxFor(a => a.SMSTriggeredLocation, new { @class = "form-control" })
                                                            </div>
                                                        </div>

                                                    </div>
                                                    <div class="col-md-6">
                                                        <label class="form-label-title ">Start Request Date</label>
                                                        @Html.TextBoxFor(m => m.StartRequestDate, "{0:yyyy-MM-dd}", new { @class = "form-control", placeholder = "Start Request Date", type = "Date", min = DateTime.Now.ToString("yyyy-MM-dd") })

                                                    </div>
                                                    <div class="col-md-6">
                                                        <label class="form-label-title ">End Request Date</label>
                                                        @Html.TextBoxFor(m => m.EndRequestDate, "{0:yyyy-MM-dd}", new { @class = "form-control", placeholder = "End Request Date", type = "Date", min = DateTime.Now.ToString("yyyy-MM-dd") })

                                                    </div>

                                                    <div class="col-md-3">
                                                        <label class="form-label-title">Trip Type</label>
                                                        @Html.DropDownListFor(a => a.TripType, Model.TripTypes, "--Select Trip Types--", new { @class = "form-control" })
                                                    </div>
                                                    <div class="col-md-3">
                                                        <label class="form-label-title ">Shift Type</label>

                                                        @Html.DropDownListFor(a => a.ShiftType, Model.ShiftTypes, "--Select Shift Type--", new { @class = "form-control", id = "shifttype" })

                                                    </div>
                                                    <div class="col-md-3" id="pickupShiftTimeContainer">
                                                        <label class="form-label-title">Pickup Shift Time</label>

                                                        @Html.DropDownListFor(a => a.PickupShiftTimeId, Model.PickUpshiftTimes, "--Select Pickup Shift Time--", new { @class = "form-control", id = "pickupshifttime" })
                                                    </div>
                                                    <div class="col-md-3" id="dropShiftTimeContainer">
                                                        <label class="form-label-title">Drop Shift Time</label>
                                                        @Html.DropDownListFor(a => a.DropShiftTimeId, Model.DropshiftTimes, "--Select Drop Shift Time--", new { @class = "form-control", id = "dropshifttime" })

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="card-footer text-end">
                                            <button type="submit" class="btn btn-primary">@ViewBag.BtnTXT</button>
                                            <button type="reset" class="btn btn-outline-primary">Reset</button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
                <!-- Page body end -->
            </div>
        </div>
    </div>
</div>

<!-- Modal Popup -->

<div class="modal fade" id="geoLocationModal" tabindex="-1" aria-labelledby="geoLocationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">

            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="geoLocationModalLabel">
                    <i class="fa fa-pencil"></i> Add Geo Location Name
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <div class="row mb-3">

                    <div class="col-md-6">
                        <label for="searchLocation" class="form-label">Search</label>
                        <div class="input-group">
                            <input type="text" id="searchLocation" class="form-control" placeholder="Location">
                            <button class="btn btn-secondary">
                                <i class="fa fa-search"></i>
                            </button>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <label for="geocodeAddress" class="form-label">Geocode Address</label>
                        <textarea id="geocodeAddress" class="form-control" rows="1" placeholder="Address"></textarea>
                    </div>
                </div>


                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="locationName" class="form-label">Location Name</label>
                        <input type="text" id="locationName" class="form-control" placeholder="Enter Area Name">
                    </div>
                </div>

                <!-- Map -->
                <div class="row">
                    <div class="col-md-12">
                        <div id="map" style="width: 100%; height: 300px; border: 1px solid #ddd;"></div>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success">Save Location</button>
            </div>
        </div>
    </div>
</div>

<!--Error Model-->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Errors in Uploaded Data</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <table id="errorTable" class="datatable table table-striped">
                    <thead>
                        <tr>
                            <th>Row</th>
                            <th>Error Type</th>
                            <th>Description</th>

                        </tr>
                    </thead>
                    <tbody>
                        <!-- Error rows will be dynamically added here -->
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default waves-effect " data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function (event) {
            const hasErrors = '@TempData["HasErrors"]' === 'True';
            if (hasErrors) {
                const errorData = JSON.parse('@Html.Raw(TempData["ExcelErrors"])');
                const errorTable = document.getElementById("errorTable").querySelector("tbody");

                // Populate the table with error data
                errorData.forEach(error => {
                    const row = errorTable.insertRow();
                    const affectedRowCell = row.insertCell(0);
                    const errorTypeCell = row.insertCell(1);
                    const descriptionCell = row.insertCell(2);



                    affectedRowCell.textContent = error.AffectedRow;
                    errorTypeCell.textContent = error.ErrorType;
                    descriptionCell.textContent = error.Description;

                });

                // Show the modal
                const modal = new bootstrap.Modal(document.getElementById("exampleModal"));
                modal.show();
            }
        });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Query Selectors
        const requestType = document.querySelector('[name="RequestType"]');
        const pickupLocation = document.querySelector('#pickupLocation');
        const dropLocation = document.querySelector('#dropLocation');
        const destinationRequestMethod = document.querySelector('#destinationRequestMethod');
        const employeeId = document.querySelector('#employeeId');
        const gender = document.querySelector('#gender');
        const firstName = document.querySelector('#firstName');
        const lastName = document.querySelector('#lastName');
        const email = document.querySelector('#email');
        const guestContact = document.querySelector('#guestContact');
        const tripType = document.querySelector('#TripType');
        const shiftType = document.querySelector('#shifttype');
        const guestParts = document.querySelectorAll('.guestpart');
        const smsTriggerLocation = document.querySelector('#smstriggerlocation');
        const locationType = document.querySelector('[name="LocationType"]');
        const startRequestDate = document.querySelector('[name="StartRequestDate"]');
        const endRequestDate = document.querySelector('[name="EndRequestDate"]');
        const pickupShiftTimeContainer = document.querySelector('#pickupShiftTimeContainer');
        const dropShiftTimeContainer = document.querySelector('#dropShiftTimeContainer');
        const pickupshift = document.querySelector('#pickupshift');
        const dropshift = document.querySelector('#dropshift');

        // Handle Request Type Change
        function handleRequestTypeChange() {
            const value = requestType?.value;

            if (value === "GUEST") {
                toggleElementsVisibility(guestParts, true);
                employeeId.disabled = false;
            } else if (value === "SELF" || value === "") {
                employeeId.disabled = true;
                toggleElementsVisibility(guestParts, false);
                resetEmployeeDetails();
            } else if (value === "EMPLOYEE") {
                toggleElementsVisibility(guestParts, false);
                employeeId.disabled = false;
            } else {
                toggleElementsVisibility(guestParts, false);
                employeeId.disabled = false;
                resetEmployeeDetails();
            }
        }

        // Handle Location Type Change
        function handleLocationTypeChange() {
            const value = locationType?.value;
            toggleElementVisibility(smsTriggerLocation, value === "Single Location");
        }

        // Handle Start and End Date Change
        function handleStartEndDateSelectChange() {
            const startDate = startRequestDate?.value.trim();
            const endDate = endRequestDate?.value.trim();
            const isEnabled = startDate && endDate;

            toggleElementDisabled(tripType, !isEnabled);
            toggleElementDisabled(shiftType, !isEnabled);
        }

        // Handle Trip Type and Shift Type Change
        function handleTripTypeShiftTypeChange() {
            const tripTypeValue = tripType?.value;
            const shiftTypeValue = shiftType?.value;

            if (tripTypeValue === "3" && shiftTypeValue !== "") {
                toggleElementVisibility(pickupShiftTimeContainer, true);
                toggleElementVisibility(dropShiftTimeContainer, true);
            } else if (tripTypeValue === "1" && shiftTypeValue !== "") {
                toggleElementVisibility(pickupShiftTimeContainer, true);
                toggleElementVisibility(dropShiftTimeContainer, false);
            } else if (tripTypeValue === "2" && shiftTypeValue !== "") {
                toggleElementVisibility(pickupShiftTimeContainer, false);
                toggleElementVisibility(dropShiftTimeContainer, true);
            } else {
                toggleElementVisibility(pickupShiftTimeContainer, false);
                toggleElementVisibility(dropShiftTimeContainer, false);
            }
        }

        // Reset Employee Details
        function resetEmployeeDetails() {
            employeeId.value = "";
            firstName.value = "";
            lastName.value = "";
            gender.value = "";
            email.value = "";
            guestContact.value = "";
        }

        // Helper Function: Toggle Single Element Visibility
        function toggleElementVisibility(element, show) {
            if (element) element.style.display = show ? "block" : "none";
        }

        // Helper Function: Toggle Multiple Elements Visibility
        function toggleElementsVisibility(elements, show) {
            elements.forEach(element => {
                if (element.parentElement) {
                    element.parentElement.style.display = show ? "block" : "none";
                }
            });
        }

        // Helper Function: Toggle Single Element Disabled State
        function toggleElementDisabled(element, disable) {
            if (element) element.disabled = disable;
        }

        // Event Listeners
        requestType?.addEventListener("change", handleRequestTypeChange);
        locationType?.addEventListener("change", handleLocationTypeChange);
        startRequestDate?.addEventListener("change", handleStartEndDateSelectChange);
        endRequestDate?.addEventListener("change", handleStartEndDateSelectChange);
        tripType?.addEventListener("change", handleTripTypeShiftTypeChange);
        shiftType?.addEventListener("change", handleTripTypeShiftTypeChange);

        // Initial Setup
        handleRequestTypeChange();
        handleLocationTypeChange();
        handleStartEndDateSelectChange();
        handleTripTypeShiftTypeChange();
    });

</script>
<script>
    $(document).ready(function () {
        function fetchEmployeeDetails(id) {
            if (id) {
                $.ajax({
                    url: '@Url.Action("GetEmployeeDetails", "ETS")',
                    type: 'GET',
                    data: { id: id },
                    success: function (response) {
                        if (response) {
                            $('#firstName').val(response.firstName);
                            $('#lastName').val(response.lastName);
                            $('#gender').val(response.gender);
                            $('#email').val(response.email);
                            $('#guestContact').val(response.guestContactNumber);
                        } else {
                            alert('Employee not found');
                        }
                    },
                    error: function () {
                        console.log('Error fetching employee details');
                    }
                });
            }
        }

        var existingEmployeeId = $('#employeeId').val();
        if (existingEmployeeId) {
            fetchEmployeeDetails(existingEmployeeId);
        }

        $('#employeeId').on('keyup', function () {
            var id = $(this).val();
            fetchEmployeeDetails(id);
        });
    });
</script>


<script>
    function initMap() {
        const map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: 28.6139, lng: 77.209 },
            zoom: 10,
        });
        const marker = new google.maps.Marker({
            position: { lat: 28.6139, lng: 77.209 },
            map: map,
        });
    }
</script>
<script async
        defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBrbWFXlOYpaq51wteSyFS2UjdMPOWBlQw&callback=initMap&libraries=places&callback=initAutocomplete">

</script>



