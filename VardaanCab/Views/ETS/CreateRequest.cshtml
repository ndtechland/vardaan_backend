@model VardaanCab.Domain.DTO.CreateRequestDTO
@{
    ViewBag.Title = "CreateRequest";
    Layout = "~/Views/Shared/Master/_NewAdminLayout.cshtml";
}

<div class="container-fluid">
    <div class="row">

        <div class="col-12">
            <div class="row">
                <div class="col-sm-12">
                    <div class="card">
                       
                        <div class="card-header  card-header--2">
                            <div>
                                <h5>@ViewBag.Heading</h5>
                            </div>
                            <div>
                                <h5>Export to Excel</h5>

                                @using (Html.BeginForm("ImportEmployeeData", "ETS", FormMethod.Post, new { enctype = "multipart/form-data" }))
                                {
                                    <div>
                                        <a href="@Url.Action("ExportToExcel","ETS")"><img src="~/adminassets/images/icon/Export-Image.png" /></a> <input type="file" class="form-control col-1" name="file" /><br />
                                    </div>
                                    <button type="submit" class="btn btn-primary">Import</button>
                                }
                            </div>
                        </div>

                        <form class="theme-form mega-form" action="CreateRequest" method="post" enctype="multipart/form-data">
                            <div class="card-body">
                                <input name="MenuId" type="hidden" value="@ViewBag.menuId" />
                                <input name="Id" type="hidden" value="@Model.Id" />
                                @if (TempData["msg"] != null)
                                {
                                    <div class="mb-3">
                                        <div class="alert alert-success">
                                            @TempData["msg"]
                                        </div>
                                    </div>
                                }
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <label class="form-label-title ">Request Type</label>
                                                <select name="RequestType" id="RequestType" class="form-control">
                                                    <option value="">--Select Request Type--</option>
                                                    <option value="SELF" @(Model.RequestType == "SELF" ? "selected" : "")>SELF</option>
                                                    <option value="EMPLOYEE" @(Model.RequestType == "EMPLOYEE" ? "selected" : "")>EMPLOYEE</option>
                                                    <option value="GUEST" @(Model.RequestType == "GUEST" ? "selected" : "")>GUEST</option>

                                                </select>
                                            </div>

                                            <div class="col-md-6">
                                                <label class="form-label-title ">Select Company</label>
                                                @Html.DropDownListFor(a => a.CompanyId, Model.Companies, "--Select Company--", new { @class = "form-control", @required = "" })
                                                <span class="text-danger">
                                                    @Html.ValidationMessageFor(a => a.CompanyId)
                                                </span>
                                            </div>
                                            <div class="col-md-6">
                                                <label class="form-label-title ">Employee Id</label>
                                                @Html.TextBoxFor(a => a.EmployeeId, new { @class = "form-control", id = "employeeId", placeholder = "Employee Id" })
                                            </div>
                                            <div class="col-md-3">
                                                <label class="form-label-title ">First Name</label>
                                                @Html.TextBoxFor(a => a.FirstName, new { @class = "form-control", id = "firstName", placeholder = "Employee First Name", @readonly = "true" })
                                            </div>
                                            <div class="col-md-3">
                                                <label class="form-label-title ">Last Name</label>
                                                @Html.TextBoxFor(a => a.LastName, new { @class = "form-control", id = "lastName", placeholder = "Employee Last Name", @readonly = "true" })
                                            </div>
                                            <div class="col-md-3">
                                                <label class="form-label-title ">Gender</label>
                                                <select id="gender" name="Gender" style="pointer-events: none; background-color: #e9ecef;"
                                                        class="form-control js-example-basic-single col-sm-12" readonly>
                                                    <option value="">--Select Gender--</option>
                                                    <option value="Male" @(Model.Gender == "Male" ? "selected" : "")>Male</option>
                                                    <option value="Female" @(Model.Gender == "Female" ? "selected" : "")>Female</option>
                                                    <option value="Other" @(Model.Gender == "Other" ? "Other" : "")>Other</option>


                                                </select>
                                            </div>
                                            <div class="col-md-3">
                                                <label class="form-label-title ">Email</label>
                                                @Html.TextBoxFor(a => a.Email, new { @class = "form-control", id = "email", placeholder = "Employee Email", @readonly = "true" })
                                            </div>
                                            <div class="col-md-6">
                                                <label class="form-label-title ">Guest Contact Number With Country Code</label>
                                                @Html.TextBoxFor(a => a.GuestContact, new { @class = "form-control", id = "guestContact", placeholder = "eg.919999999999", @readonly = "true" })
                                            </div>

                                            <div class="col-md-3">
                                                <div class="guestpart">
                                                    <label class="form-label-title ">Unit (ASPL/AZTEC)</label>
                                                    <select name="Unit" id="unit" class="form-control">
                                                        <option value="ASPL" @(Model.Unit == "ASPL" ? "ASPL" : "")>ASPL</option>
                                                        <option value="AZTEC" @(Model.Unit == "AZTEC" ? "AZTEC" : "")>AZTEC</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="guestpart">
                                                    <label class="form-label-title ">Department</label>
                                                    @Html.TextBoxFor(a => a.Department, new { @class = "form-control", id = "department", placeholder = "Enter Department" })
                                                </div>


                                            </div>
                                            <div class="col-md-3">
                                                <div class="guestpart">
                                                    <label class="form-label-title ">Cost Centre</label>
                                                    @Html.TextBoxFor(a => a.CostCentre, new { @class = "form-control", placeholder = "Cost Centre" })

                                                </div>
                                                  
                                            </div>
                                            <div class="col-md-3">
                                                <div class="guestpart">
                                                    <label class="form-label-title ">Expence Code</label>
                                                    @Html.TextBoxFor(a => a.ExpenseCode, new { @class = "form-control", placeholder = "Expence Code" })
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="guestpart">
                                                    <label class="form-label-title ">Requestor Emp ID</label>
                                                    @Html.TextBoxFor(a => a.RequestorEmpId, new { @class = "form-control", placeholder = "Requestor Emp ID" })
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="guestpart">
                                                    <label class="form-label-title ">Requestor Name</label>
                                                    @Html.TextBoxFor(a => a.RequestorName, new { @class = "form-control", placeholder = "Requestor Name" })
                                                </div>

                                            </div>
                                            <div class="col-md-6">
                                                <div class="guestpart">
                                                    <label class="form-label-title ">Requestor Contact Numbers Comma Separated</label>
                                                    @Html.TextBoxFor(a => a.RequestorContacts, new { @class = "form-control", placeholder = "Eg.919811172193,919999999999" })
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="guestpart">
                                                    <label class="form-label-title ">Date of Booking Received</label>
                                                    <div class="input-group date" id="dt-date"
                                                         data-target-input="nearest">
                                                        <div class="input-group">

                                                            @Html.TextBoxFor(a => a.BookingReceivedDate, new { @class = "form-control", type = "date", placeholder = "Date of Booking Received" })

                                                        </div>
                                                    </div>
                                                </div>

                                            </div>
                                            <div class="col-md-3">
                                                <div class="guestpart">
                                                    <label class="form-label-title ">Request Trip Type</label>
                                                    <select name="RequestTripType" id="requesttripType" class="form-control">
                                                        <option value="1" @(Model.RequestTripType == "1" ? "selected" : "")>Airport Pickup</option>
                                                        <option value="2" @(Model.RequestTripType == "2" ? "selected" : "")>Airport Drop</option>
                                                        <option value="3" @(Model.RequestTripType == "3" ? "selected" : "")>Medical Emergency</option>
                                                        <option value="4" @(Model.RequestTripType == "4" ? "selected" : "")>Office Transfer</option>
                                                        <option value="5" @(Model.RequestTripType == "5" ? "selected" : "")>Hotel Transfer</option>
                                                        <option value="6" @(Model.RequestTripType == "6" ? "selected" : "")>Railway Station Pickup</option>
                                                        <option value="7" @(Model.RequestTripType == "7" ? "selected" : "")>Administration</option>
                                                    </select>
                                                </div>

                                            </div>
                                            <div class="col-md-6">
                                                <div class="guestpart">
                                                    <label class="form-label-title ">Destination Request Method</label>
                                                    <select name="DestinationRequestMethod" class="form-control" disabled>
                                                        <option value="Single" @(Model.DestinationRequestMethod == "Single" ? "selected" : "")>Single</option>
                                                        <option value="Multiple" @(Model.DestinationRequestMethod == "Multiple" ? "selected" : "")>Multiple</option>
                                                    </select>
                                                </div>

                                            </div>
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="guestpart">
                                                        <label class="form-label-title ">Location Types</label>
                                                        <select name="LocationType" id="locationType" class="form-control">
                                                            <option value="">Select Location Type</option>
                                                            <option value="Multiple Location" @(Model.LocationType == "Multiple Location" ? "selected" : "")>Multiple Location</option>
                                                            <option value="Single Location" @(Model.LocationType == "Single Location" ? "selected" : "")>Single Location</option>
                                                        </select>
                                                    </div>

                                                </div>
                                                <div class="col-md-6">
                                                    <div class="guestpart">
                                                        <div id="smstriggerlocation">
                                                            <label class="form-label-title ">SMS Triggered Location</label>
                                                            @Html.TextBoxFor(a => a.SMSTriggeredLocation, new { @class = "form-control" })
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>

                                            <div class="col-md-6">
                                                <label class="form-label-title ">Start Request Date</label>
                                                <div class="input-group date" id="sdt-date"
                                                     data-target-input="nearest">
                                                    <div class="input-group">

                                                        @Html.TextBoxFor(a => a.StartRequestDate, new
{
@class = "form-control",
type = "date",
placeholder = "Start Request Date",
min = DateTime.Now.ToString("yyyy-MM-dd")
})


                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <label class="form-label-title ">End Request Date</label>
                                                <div class="input-group date" id="edt-date"
                                                     data-target-input="nearest">
                                                    <div class="input-group">
                                                        @Html.TextBoxFor(a => a.EndRequestDate, new { @class = "form-control", type = "date", placeholder = "End Request Date", min = DateTime.Now.ToString("yyyy-MM-dd") })

                                                    </div>
                                                </div>
                                            </div>

                                            <div class="col-md-3">
                                                <label class="form-label-title">Trip Type</label>
                                                @Html.DropDownListFor(a => a.TripType, Model.TripTypes, "--Select Trip Types--", new { @class = "form-control", id = "tripType" })
                                            </div>
                                            <div class="col-md-3">
                                                <label class="form-label-title ">Shift Type</label>
                                                @*<select id="shifttype" name="ShiftType" class="form-control" disabled>
                                    <option value="">--Select Shift Type--</option>
                                    <option value="NORMAL" @(Model.ShiftType == "NORMAL" ? "selected" : "")>NORMAL</option>
                                </select>*@
                                                @Html.DropDownListFor(a => a.ShiftType, Model.ShiftTypes, "--Select Shift Type--", new { @class = "form-control", id = "shifttype" })

                                            </div>
                                            <div class="col-md-3" id="pickupShiftTimeContainer">
                                                <label class="form-label-title">Pickup Shift Time</label>

                                                @Html.DropDownListFor(a => a.PickupShiftTimeId, Model.PickUpshiftTimes, "--Select Pickup Shift Time--", new { @class = "form-control", id = "pickupshifttime" })
                                            </div>
                                            <div class="col-md-3" id="dropShiftTimeContainer">
                                                <label class="form-label-title">Drop Shift Time</label>
                                                @Html.DropDownListFor(a => a.DropShiftTimeId, Model.DropshiftTimes, "--Select Drop Shift Time--", new { @class = "form-control", id = "dropshifttime" })

                                            </div>
                                            <div class="col-md-3" id="pickupshift">
                                                <label class="form-label-title ">Shift Time</label>
                                                @Html.DropDownListFor(a => a.PickupShiftTimeId, Model.PickUpshiftTimes, "--Select Shift Time--", new { @class = "form-control" })
                                            </div>
                                            <div class="col-md-3" id="dropshift">
                                                <label class="form-label-title ">Shift Time</label>

                                                @Html.DropDownListFor(a => a.DropShiftTimeId, Model.DropshiftTimes, "--Select Shift Time--", new { @class = "form-control" })
                                            </div>

                                            @*<div class="col-md-6">
                                <div id="pickupLocation">
                                    <label class="form-label-title">Pickup Location</label>
                                    <div class="input-group">
                                        <select name="PickupLocation" class="form-control">
                                            <option value="">--Select Pickup Location--</option>
                                            <option value="sector1">Sector 1</option>
                                            <option value="sector2">Sector 2</option>
                                            <option value="sector3">Sector 3</option>
                                        </select>
                                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#geoLocationModal">
                                            <i class="fa fa-location-arrow text-primary"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div id="dropLocation">
                                    <label class="form-label-title">Drop Location</label>
                                    <div class="input-group">
                                        <select name="DropLocation" id="dropLocation" class="form-control">
                                            <option value="">--Select Drop Location--</option>
                                            <option value="sector1">Sector 1</option>
                                            <option value="sector2">Sector 2</option>
                                            <option value="sector3">Sector 3</option>
                                        </select>
                                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#geoLocationModal">
                                            <i class="fa fa-location-arrow text-primary"></i>
                                        </button>
                                    </div>
                                </div>

                            </div>*@

                                        </div>

                                    </div>


                                </div>

                            </div>
                            <div class="card-footer text-end">
                                <button type="submit" class="btn btn-primary">@ViewBag.BtnTXT</button>
                                <button type="reset" class="btn btn-outline-primary">Reset</button>
                            </div>
                        </form>
                    </div>

                </div>

            </div>
        </div>
    </div>
</div>
<!-- Modal Popup -->

<div class="modal fade" id="geoLocationModal" tabindex="-1" aria-labelledby="geoLocationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">

            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="geoLocationModalLabel">
                    <i class="fa fa-pencil"></i> Add Geo Location Name
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <div class="row mb-3">

                    <div class="col-md-6">
                        <label for="searchLocation" class="form-label">Search</label>
                        <div class="input-group">
                            <input type="text" id="searchLocation" class="form-control" placeholder="Location">
                            <button class="btn btn-secondary">
                                <i class="fa fa-search"></i>
                            </button>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <label for="geocodeAddress" class="form-label">Geocode Address</label>
                        <textarea id="geocodeAddress" class="form-control" rows="1" placeholder="Address"></textarea>
                    </div>
                </div>


                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="locationName" class="form-label">Location Name</label>
                        <input type="text" id="locationName" class="form-control" placeholder="Enter Area Name">
                    </div>
                </div>

                <!-- Map -->
                <div class="row">
                    <div class="col-md-12">
                        <div id="map" style="width: 100%; height: 300px; border: 1px solid #ddd;"></div>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success">Save Location</button>
            </div>
        </div>
    </div>
</div>

@*<script>
        document.addEventListener("DOMContentLoaded", function () {

            const RequestType = document.querySelector('[name="RequestType"]');
            const pickupLocation = document.querySelector('#pickupLocation');
            const dropLocation = document.querySelector('#dropLocation');
            const destinationRequestMethod = document.querySelector('#destinationRequestMethod');
            const employeeId = document.querySelector('#employeeId');
            const gender = document.querySelector('#gender');
            const firstName = document.querySelector('#firstName');
            const lastName = document.querySelector('#lastName');
            const email = document.querySelector('#email');
            const guestContact = document.querySelector('#guestContact');
            const triptype = document.querySelector('#triptype');
            const ShiftType = document.querySelector('#shifttype');
            const guestparts = document.querySelectorAll('.guestpart');
            const smstriggerlocation = document.querySelector('#smstriggerlocation');
            const LocationType = document.querySelector('[name="LocationType"]');
            const StartRequestDate = document.querySelector('[name="StartRequestDate"]');
            const EndRequestDate = document.querySelector('[name="EndRequestDate"]');


            function handleRequestTypeChange() {
                const value = RequestType.value;

                if (value === "GUEST") {
                    guestparts.forEach(part => {
                        part.parentElement.style.display = "block";
                    });
                    employeeId.disabled = false
                }
                else if (value === "SELF" || value === "") {
                    employeeId.disabled = true;
                    guestparts.forEach(part => {
                        part.parentElement.style.display = "none";
                    });
                    resetEmployeeDetails();
                }
                else {
                    guestparts.forEach(part => {
                        part.parentElement.style.display = "none";
                    });

                    employeeId.disabled = false;
                    resetEmployeeDetails();
                }
            }

            function handleLocationTypeChange() {
                const value = LocationType.value;

                if (value === "Single Location") {
                    smstriggerlocation.parentElement.style.display = "block";

                }
                else {
                    smstriggerlocation.parentElement.style.display = "none";

                }
            }

            function handleStartEndDateSelectChange() {
                const StartRequestDateselect = StartRequestDate.value;
                const EndRequestDateselect = EndRequestDate.value;

                if (StartRequestDateselect != null && EndRequestDateselect!=null) {
                    triptype.parentElement.style.display = "block";
                    shifttype.parentElement.style.display = "block";

                }
                else {
                    triptype.parentElement.style.display = "none";
                    shifttype.parentElement.style.display = "none";

                }
            }
            function resetEmployeeDetails() {
                employeeId.value = "";
                firstName.value = "";
                lastName.value = "";
                gender.value = "";
                email.value = "";
                guestContact.value = "";
                //$("#gender").css("pointer-events", "auto");
                //$("#gender").css("background-color", "");
            }



            RequestType.addEventListener("change", handleRequestTypeChange);
            LocationType.addEventListener("change", handleLocationTypeChange);

            handleRequestTypeChange();
            handleLocationTypeChange();
            handleStartEndDateSelectChange();
        });
    </script>*@
@*<script>
        document.addEventListener("DOMContentLoaded", function () {
            // Query Selectors
            const requestType = document.querySelector('[name="RequestType"]');
            const pickupLocation = document.querySelector('#pickupLocation');
            const dropLocation = document.querySelector('#dropLocation');
            const destinationRequestMethod = document.querySelector('#destinationRequestMethod');
            const employeeId = document.querySelector('#employeeId');
            const gender = document.querySelector('#gender');
            const firstName = document.querySelector('#firstName');
            const lastName = document.querySelector('#lastName');
            const email = document.querySelector('#email');
            const guestContact = document.querySelector('#guestContact');
            const tripType = document.querySelector('#triptype');
            const shiftType = document.querySelector('#shifttype');
            const guestParts = document.querySelectorAll('.guestpart');
            const smsTriggerLocation = document.querySelector('#smstriggerlocation');
            const locationType = document.querySelector('[name="LocationType"]');
            const startRequestDate = document.querySelector('[name="StartRequestDate"]');
            const endRequestDate = document.querySelector('[name="EndRequestDate"]');


            // Handle Request Type Change
            function handleRequestTypeChange() {
                const value = requestType.value;

                if (value === "GUEST") {
                    toggleElementsVisibility(guestParts, true);
                    employeeId.disabled = false;
                } else if (value === "SELF" || value === "") {
                    employeeId.disabled = true;
                    toggleElementsVisibility(guestParts, false);
                    resetEmployeeDetails();
                }
                else if (value === "EMPLOYEE") {
                    toggleElementsVisibility(guestParts, false);
                    employeeId.disabled = false;
                    employeeId.disabled = false;
                }
                else {
                    toggleElementsVisibility(guestParts, false);
                    employeeId.disabled = false;
                    resetEmployeeDetails();
                }
            }

            // Handle Location Type Change
            function handleLocationTypeChange() {
                const value = locationType.value;
                toggleElementVisibility(smsTriggerLocation, value === "Single Location");
            }

            // Handle Start and End Date Change
            function handleStartEndDateSelectChange() {
                const startDate = startRequestDate.value.trim();
                const endDate = endRequestDate.value.trim();
                const isEnabled = startDate && endDate;

                toggleElementDisabled(tripType, !isEnabled);
                toggleElementDisabled(shiftType, !isEnabled);
            }


            // Reset Employee Details
            function resetEmployeeDetails() {
                employeeId.value = "";
                firstName.value = "";
                lastName.value = "";
                gender.value = "";
                email.value = "";
                guestContact.value = "";
            }

            // Helper Function: Toggle Single Element Visibility
            function toggleElementVisibility(element, show) {
                element.parentElement.style.display = show ? "block" : "none";
            }

            // Helper Function: Toggle Single Element Disabled State
            function toggleElementDisabled(element, disable) {
                element.disabled = disable;
            }

            // Helper Function: Toggle Multiple Elements Visibility
            function toggleElementsVisibility(elements, show) {
                elements.forEach(element => {
                    element.parentElement.style.display = show ? "block" : "none";
                });
            }

            // Event Listeners
            requestType.addEventListener("change", handleRequestTypeChange);
            locationType.addEventListener("change", handleLocationTypeChange);
            startRequestDate.addEventListener("change", handleStartEndDateSelectChange);
            endRequestDate.addEventListener("change", handleStartEndDateSelectChange);

            // Initial Setup
            handleRequestTypeChange();
            handleLocationTypeChange();
            handleStartEndDateSelectChange();
        });
    </script>*@

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Query Selectors
        const requestType = document.querySelector('[name="RequestType"]');
        const pickupLocation = document.querySelector('#pickupLocation');
        const dropLocation = document.querySelector('#dropLocation');
        const destinationRequestMethod = document.querySelector('#destinationRequestMethod');
        const employeeId = document.querySelector('#employeeId');
        const gender = document.querySelector('#gender');
        const firstName = document.querySelector('#firstName');
        const lastName = document.querySelector('#lastName');
        const email = document.querySelector('#email');
        const guestContact = document.querySelector('#guestContact');
        const tripType = document.querySelector('#triptype');
        const shiftType = document.querySelector('#shifttype');
        const guestParts = document.querySelectorAll('.guestpart');
        const smsTriggerLocation = document.querySelector('#smstriggerlocation');
        const locationType = document.querySelector('[name="LocationType"]');
        const startRequestDate = document.querySelector('[name="StartRequestDate"]');
        const endRequestDate = document.querySelector('[name="EndRequestDate"]');
        const pickupShiftTimeContainer = document.querySelector('#pickupShiftTimeContainer');
        const dropShiftTimeContainer = document.querySelector('#dropShiftTimeContainer');
        //const shiftTimeContainer = document.querySelector('#shiftTimeContainer');
        const pickupshift = document.querySelector('#pickupshift');
        const dropshift = document.querySelector('#dropshift');

        // Handle Request Type Change
        function handleRequestTypeChange() {
            const value = requestType.value;

            if (value === "GUEST") {
                toggleElementsVisibility(guestParts, true);
                employeeId.disabled = false;
            } else if (value === "SELF" || value === "") {
                employeeId.disabled = true;
                toggleElementsVisibility(guestParts, false);
                resetEmployeeDetails();
            }
            else if (value === "EMPLOYEE") {
                toggleElementsVisibility(guestParts, false);
                employeeId.disabled = false;
            }
            else {
                toggleElementsVisibility(guestParts, false);
                employeeId.disabled = false;
                resetEmployeeDetails();
            }
        }

        // Handle Location Type Change
        function handleLocationTypeChange() {
            const value = locationType.value;
            toggleElementVisibility(smsTriggerLocation, value === "Single Location");
        }

        // Handle Start and End Date Change
        function handleStartEndDateSelectChange() {
            const startDate = startRequestDate.value.trim();
            const endDate = endRequestDate.value.trim();
            const isEnabled = startDate && endDate;

            toggleElementDisabled(tripType, !isEnabled);
            toggleElementDisabled(shiftType, !isEnabled);
        }

        // Handle Trip Type and Shift Type Change
        function handleTripTypeShiftTypeChange() {
            const tripTypeValue = tripType.value;
            const shiftTypeValue = shiftType.value;

            if (tripTypeValue === "3" && shiftTypeValue !== "") {
                toggleElementVisibility(pickupShiftTimeContainer, true);
                toggleElementVisibility(dropShiftTimeContainer, true);
                toggleElementVisibility(dropshift, false);
                toggleElementVisibility(pickupshift, false);
            } else if (tripTypeValue === "1" && shiftTypeValue !== "") {
                toggleElementVisibility(pickupShiftTimeContainer, false);
                toggleElementVisibility(dropShiftTimeContainer, false);
                toggleElementVisibility(dropshift, false);
                toggleElementVisibility(pickupshift, true);
            }
            else if (tripTypeValue === "2" && shiftTypeValue !== "") {
                toggleElementVisibility(pickupShiftTimeContainer, false);
                toggleElementVisibility(dropShiftTimeContainer, false);
                toggleElementVisibility(dropshift, true);
                toggleElementVisibility(pickupshift, false);
            } else {
                toggleElementVisibility(pickupShiftTimeContainer, false);
                toggleElementVisibility(dropShiftTimeContainer, false);
                toggleElementVisibility(dropshift, false);
                toggleElementVisibility(pickupshift, false);
            }
        }

        // Reset Employee Details
        function resetEmployeeDetails() {
            employeeId.value = "";
            firstName.value = "";
            lastName.value = "";
            gender.value = "";
            email.value = "";
            guestContact.value = "";
        }

        // Helper Function: Toggle Single Element Visibility
        function toggleElementVisibility(element, show) {
            element.style.display = show ? "block" : "none";
        }

        // Helper Function: Toggle Multiple Elements Visibility
        function toggleElementsVisibility(elements, show) {
            elements.forEach(element => {
                element.parentElement.style.display = show ? "block" : "none";
            });
        }

        // Helper Function: Toggle Single Element Disabled State
        function toggleElementDisabled(element, disable) {
            element.disabled = disable;
        }

        // Event Listeners
        requestType.addEventListener("change", handleRequestTypeChange);
        locationType.addEventListener("change", handleLocationTypeChange);
        startRequestDate.addEventListener("change", handleStartEndDateSelectChange);
        endRequestDate.addEventListener("change", handleStartEndDateSelectChange);
        tripType.addEventListener("change", handleTripTypeShiftTypeChange);
        shiftType.addEventListener("change", handleTripTypeShiftTypeChange);

        // Initial Setup
        handleRequestTypeChange();
        handleLocationTypeChange();
        handleStartEndDateSelectChange();
        handleTripTypeShiftTypeChange();
    });
</script>
<script>
    $(document).ready(function () {
        $('#employeeId').on('keyup', function () {
            var id = $(this).val();
            if (id) {
                $.ajax({
                    url: '@Url.Action("GetEmployeeDetails", "ETS")',
                    type: 'GET',
                    data: { id: id },
                    success: function (response) {
                        if (response) {
                            $('#firstName').val(response.firstName);
                            $('#lastName').val(response.lastName);
                            $('#gender').val(response.gender);
                            $('#email').val(response.email);
                            $('#guestContact').val(response.guestContactNumber);
                        } else {
                            alert('Employee not found');
                        }
                    },
                    error: function () {
                        console.log('Error fetching employee details');
                    }
                });
            }
        });
    });
</script>


<script>
    function initMap() {
        const map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: 28.6139, lng: 77.209 },
            zoom: 10,
        });
        const marker = new google.maps.Marker({
            position: { lat: 28.6139, lng: 77.209 },
            map: map,
        });
    }
</script>
<script async
        defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBrbWFXlOYpaq51wteSyFS2UjdMPOWBlQw&callback=initMap&libraries=places&callback=initAutocomplete">

</script>



