@model VardaanCab.Domain.DTO.CompanyZoneDTO
@{
    ViewBag.Title = "AddCompanyZone";
    Layout = "~/Views/Shared/New_Master/_FinelAdminLayout.cshtml";
}
<style>
    #map {
        height: 50vh;
        width: 100%;
    }
</style>
<div class="pcoded-content">

    <!-- Page-header end -->
    <div class="pcoded-inner-content">
        <!-- Main-body start -->
        <div class="main-body">
            <div class="page-wrapper">
                <div class="card bread">
                    <div class="card-body">
                        <h5>@ViewBag.Heading</h5>
                        <div class="page-header-breadcrumb">
                            <ul class="breadcrumb">
                                <li class="breadcrumb-item">
                                    <a href="#!">
                                        <i class="fa fa-home"></i>
                                    </a>
                                </li>
                                <li class="breadcrumb-item">
                                    <a href="#!">Master Enteries</a>
                                </li>
                                <li class="breadcrumb-item">
                                    <a href="#!">Add Company Zones</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
                <!-- Page body start -->
                <div class="page-body">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <!-- Heading -->
                                    <h5>@ViewBag.Heading</h5>

                                    <!-- Import and Export Section -->
                                    <div class="d-flex align-items-center">
                                        <a href="/CompanyZoneETS/AllCompanyZones?menuId=@ViewBag.menuId" class="btn btn-primary btn-sm">
                                            Show All
                                        </a>
                                    </div>
                                </div>
                                <div class="card-block">
                                    <form class="theme-form mega-form" action="AddCompanyZone" method="post">
                                     
                                            <input name="MenuId" type="hidden" value="@ViewBag.menuId" />
                                            <input name="Id" type="hidden" value="@Model.Id" />
                                            @if (TempData["msg"] != null)
                                            {
                                                <div class="mb-3">
                                                    <div class="alert alert-success border-success">
                                                        @TempData["msg"]
                                                    </div>
                                                </div>
                                            }
                                            @if (TempData["errormsg"] != null)
                                            {
                                                <div class="mb-3">
                                                    <div class="alert alert-danger border-danger">
                                                        @TempData["errormsg"]
                                                    </div>
                                                </div>
                                            }
                                            <div class="row">

                                                <div class="col-md-6">
                                                    <label for="menu-type" class="form-label-title ">
                                                        Company <span class="text-danger">*</span>
                                                    </label>
                                                    @Html.DropDownListFor(a => a.CompanyId, Model.Companies, "Select Company", new { @class = "form-control", @required = "required" })
                                                    <span class="text-danger">
                                                        @Html.ValidationMessageFor(a => a.CompanyId)
                                                    </span>
                                                </div>
                                                <div class="col-md-6">
                                                    <label class="form-label-title">Company Zone<span class="text-danger">*</span></label>
                                                    @Html.TextBoxFor(a => a.CompanyZone, new { @class = "form-control", @required = "required" })
                                                    <span class="text-danger">
                                                        @Html.ValidationMessageFor(a => a.CompanyZone)
                                                    </span>
                                                </div>
                                                <div class="col-md-12 p-2">

                                                    <div id="map"></div>
                                                    @Html.HiddenFor(a => a.Zonelatlong)
                                                </div>
                                            </div>
                                         
                                        <div class="card-footer text-end">
                                            <button type="submit" id="BtnSubmit" class="btn btn-primary me-3">@ViewBag.BtnTXT</button>
                                            <a href="/CompanyZoneETS/AllCompanyZones?menuId=@ViewBag.menuId" class="btn btn-outline-primary">Cancel</a>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
                <!-- Page body end -->
            </div>
        </div>
    </div>
</div>
 
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBrbWFXlOYpaq51wteSyFS2UjdMPOWBlQw&callback=initMap&libraries=places&callback=initAutocomplete&libraries=drawing"></script>
<script>
    // JavaScript for Google Maps Polygon Drawing and Binding Coordinates
    let currentOverlay = null; // Track the current drawing

    function initMap() {
        const map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: 28.7041, lng: 77.1025 }, // Default center (e.g., Delhi)
            zoom: 10,
        });

        const drawingManager = new google.maps.drawing.DrawingManager({
            drawingMode: google.maps.drawing.OverlayType.POLYGON,
            drawingControl: true,
            drawingControlOptions: {
                position: google.maps.ControlPosition.TOP_CENTER,
                drawingModes: ["polygon"],
            },
            polygonOptions: {
                fillColor: "#FF0000",
                fillOpacity: 0.5,
                strokeWeight: 2,
                clickable: true,
                editable: true,
                draggable: true,
            }
        });

        drawingManager.setMap(map);

        // Event Listener for Polygon Completion
        google.maps.event.addListener(drawingManager, "polygoncomplete", (polygon) => {
            clearCurrentOverlay(); // Clear any existing drawing
            currentOverlay = polygon; // Store the new overlay

            // Extract coordinates and update the hidden input field
            const coordinates = polygon.getPath().getArray().map((latLng) => ({
                lat: latLng.lat(),
                lng: latLng.lng(),
            }));
            document.getElementById("Zonelatlong").value = JSON.stringify(coordinates);

            // Add click listener to remove polygon
            google.maps.event.addListener(polygon, "click", () => {
                polygon.setMap(null);
                currentOverlay = null;
                document.getElementById("Zonelatlong").value = ""; // Clear the hidden input field
            });
        });

        // Function to clear the current overlay
        function clearCurrentOverlay() {
            if (currentOverlay) {
                currentOverlay.setMap(null); // Remove the overlay from the map
                currentOverlay = null; // Reset the reference
                document.getElementById("Zonelatlong").value = "";
            }
        }

        // Function to bind JSON coordinates to a polygon
        function bindCoordinatesToPolygon(coordinates) {
            clearCurrentOverlay(); // Clear any existing overlay

            const polygon = new google.maps.Polygon({
                paths: coordinates,
                fillColor: "#FF0000",
                fillOpacity: 0.5,
                strokeWeight: 2,
                clickable: true,
                editable: true,
                draggable: true,
            });

            polygon.setMap(map); // Add the polygon to the map
            currentOverlay = polygon; // Store the reference

            document.getElementById("Zonelatlong").value = JSON.stringify(coordinates); // Update the hidden input field

            google.maps.event.addListener(polygon, "click", () => {
                polygon.setMap(null);
                currentOverlay = null;
                document.getElementById("Zonelatlong").value = ""; // Clear the hidden input field
            });
        }

        // Load saved coordinates from the hidden input field
        const jsonCoordinates = document.getElementById("Zonelatlong").value;

        if (jsonCoordinates && jsonCoordinates.trim().length > 0) {
            let parsedCoordinates;
            try {
                parsedCoordinates = JSON.parse(jsonCoordinates);
            } catch (error) {
                console.error("Error parsing JSON coordinates:", error);
                return;
            }

            if (Array.isArray(parsedCoordinates) && parsedCoordinates.length > 0) {
                bindCoordinatesToPolygon(parsedCoordinates);
            } else {
                console.error("Invalid coordinate array format:", parsedCoordinates);
            }
        }
    }

    // Initialize the map on window load
    window.onload = initMap;
</script>
@*<script>
    let currentOverlay = null;  // Track the current drawing

    function initMap() {
        const map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: 28.7041, lng: 77.1025 }, // Default center (e.g., Delhi)
            zoom: 10,
        });

        const drawingManager = new google.maps.drawing.DrawingManager({
            drawingMode: google.maps.drawing.OverlayType.POLYGON,
            drawingControl: true,
            drawingControlOptions: {
                position: google.maps.ControlPosition.TOP_CENTER,
                drawingModes: ["polygon"],
            },
            polygonOptions: {
                fillColor: "#FF0000",
                fillOpacity: 0.5,
                strokeWeight: 2,
                clickable: true,
                editable: true,
                draggable: true,
            }
        });

        drawingManager.setMap(map);



        // Event Listener for Polygon Completion
        google.maps.event.addListener(drawingManager, "polygoncomplete", (polygon) => {
            clearCurrentOverlay();  // Clear any existing drawing
            currentOverlay = polygon;  // Store the new overlay

            const coordinates = polygon.getPath().getArray().map((latLng) => ({
                lat: latLng.lat(),
                lng: latLng.lng(),
            }));
            $("#Zonelatlong").val(JSON.stringify(coordinates));
           
            google.maps.event.addListener(polygon, "click", () => {
                polygon.setMap(null);
                currentOverlay = null;
               $("#Zonelatlong").val(""); // Clear the hidden input field
            });
        });

        // Function to clear the current overlay
        function clearCurrentOverlay() {
            if (currentOverlay) {
                currentOverlay.setMap(null);  // Remove the overlay from the map
                currentOverlay = null;  // Reset the reference
               $("#Zonelatlong").val("");
            }
        }
    }

    window.onload = initMap;

</script>*@
