@model VardaanCab.Domain.DTO.EmployeeHomeRouteDTO
@{
    ViewBag.Title = "HomeRoute";
    Layout = "~/Views/Shared/New_Master/_FinelAdminLayout.cshtml";
}
<style>
    /*
    * Always set the map height explicitly to define the size of the div element
    * that contains the map.
    */
    #map {
        height: 300px;
        width: 100%;
    }


    /*
    * Optional: Makes the sample page fill the window.
    */
    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    #infowindow-content {
        display: none;
    }

    #map #infowindow-content {
        display: inline;
    }

    .pac-card {
        background-color: #fff;
        border: 0;
        border-radius: 2px;
        box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
        margin: 10px;
        padding: 0 0.5em;
        font: 400 18px Roboto, Arial, sans-serif;
        overflow: hidden;
        font-family: Roboto;
        padding: 0;
    }

    #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
    }

    .pac-controls {
        display: inline-block;
        padding: 5px 11px;
    }

        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        /*margin-left: 12px;*/
        /* padding: 0 11px 0 13px;*/
        text-overflow: ellipsis;
        /*width: 400px;*/
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }

    #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
    }

    #target {
        width: 345px;
    }
</style>
<style>
    .loader-block {
        width: 120px;
        height: 120px;
        /*animation: spin 2s linear infinite;*/
        position: fixed;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        z-index: 9999;
        display: none;
    }

    .overlay {
        display: none;
        position: fixed;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        /*background-color: rgba(0, 0, 0, 0.5);*/ /* Adjust opacity as needed */
        z-index: 9998;
    }

    .blurred {
        filter: blur(1px);
    }

    #errorTable .modal-body {
        max-height: 400px; /* Or whatever max height you prefer */
        overflow-y: auto; /* Enable scrolling if content overflows */
    }

    #errorTable th, #errorTable td {
        word-wrap: break-word; /* Prevent overflow */
        white-space: normal; /* Allow text to break onto the next line */
    }

    #errorTable td {
        max-width: 300px; /* Set a max width for the Description column */
        word-break: break-word; /* Ensures long text breaks correctly */
    }
</style>
<div class="pcoded-content" id="pcoded-content">
    <!-- Page-header end -->
    <div class="pcoded-inner-content">
        <!-- Main-body start -->
        <div class="main-body">
            <div class="page-wrapper">
                <div class="card bread">
                    <div class="card-body">
                        <h5>@ViewBag.Heading</h5>
                        <div class="page-header-breadcrumb">
                            <ul class="breadcrumb">
                                <li class="breadcrumb-item">
                                    <a href="#!">
                                        <i class="fa fa-home"></i>
                                    </a>
                                </li>
                                <li class="breadcrumb-item">
                                    <a href="#!">Master Enteries</a>
                                </li>
                                <li class="breadcrumb-item">
                                    <a href="#!">Add Home Routes</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
                <!-- Page body start -->
                <div class="page-body">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <!-- Heading -->
                                    <h5>@ViewBag.Heading</h5>
                                    <!-- Import and Export Section -->
                                    <div class="d-flex align-items-center">
                                        <!-- Export Section -->
                                        <a href="/CompanyZoneETS/AllHomeRoute?menuId=@ViewBag.menuId" class="btn btn-primary btn-sm">
                                            Show All
                                        </a>
                                        <b class="mr-2">Import To Excel Format:</b>
                                        <a href="@Url.Action("HomeRouteExportToExcel", "CompanyZoneETS")" class="btn btn-link">
                                            <img src="~/files/assets/images/Export-Image.png" alt="Export" class="img-fluid" style="height: 42px; width: 108px;" />
                                        </a>

                                        <!-- Import Form -->
                                        @using (Html.BeginForm("ImportHomeRouteData", "CompanyZoneETS", FormMethod.Post, new { enctype = "multipart/form-data" }))
                                        {
                                            <div class="d-flex align-items-center ml-3">
                                                <input type="file" class="form-control" name="file" required style="width: 200px;" />
                                                <button type="submit" class="btn btn-primary btn-sm" id="BtnImport">Import</button>
                                            </div>
                                        }
                                    </div>

                                </div>
                                <div class="card-block">
                                    <form class="theme-form mega-form" action="HomeRoute" method="post" enctype="multipart/form-data">

                                        <input name="MenuId" type="hidden" value="@ViewBag.menuId" />
                                        <input name="Id" type="hidden" value="@Model.Id" />
                                        @if (TempData["msg"] != null)
                                        {
                                            <div class="mb-3">
                                                <div class="alert alert-info">
                                                    @TempData["msg"]
                                                </div>
                                            </div>
                                        }
                                        @if (TempData["errormsg"] != null)
                                        {
                                            <div class="mb-3">
                                                <div class="alert alert-danger border-danger">
                                                    @TempData["errormsg"]
                                                </div>
                                            </div>
                                        }
                                        <div class="mb-3">
                                            <label for="menu-type" class="form-label-title ">
                                                Select Company<span class="text-danger">*</span>
                                            </label>
                                            @Html.DropDownListFor(a => a.Company_Id, Model.Companies, "Select Company", new { @class = "form-control", required = "required" })
                                            <span class="text-danger">
                                                @Html.ValidationMessageFor(a => a.Company_Id)
                                            </span>
                                        </div>
                                        <div class="mb-3">
                                            <label for="menu-type" class="form-label-title ">
                                                Select Zone<span class="text-danger">*</span>
                                            </label>
                                            <input type="text" id="CompanyZoneIdHidden" hidden value="@ViewBag.CompanyZoneId" />

                                            @Html.DropDownListFor(model => model.CompanyZoneId, Enumerable.Empty<SelectListItem>(), "Select Company Zone", new { @class = "form-control", required = "required" })
                                            @Html.ValidationMessageFor(model => model.CompanyZoneId, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label-title">Home Route Name<span class="text-danger">*</span></label>
                                            @Html.TextBoxFor(model => model.HomeRouteName, new { @class = "form-control", id = "pac-input", placeholder = "Enter a location" })
                                            <span class="text-danger">
                                                @Html.ValidationMessageFor(model => model.HomeRouteName)
                                            </span>
                                        </div>
                                        <!--Map-->
                                        <div class="row" style="display:none;">
                                            <div class="row gx-3 mb-3">
                                                <div class="col-md-12">
                                                    <div id="map"></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="card-footer text-end">
                                            <button type="submit" class="btn btn-primary me-3">@ViewBag.BtnTXT</button>
                                            <a href="/CompanyZoneETS/AllHomeRoute?menuId=@ViewBag.menuId" class="btn btn-outline-primary">Cancel</a>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
                <!-- Page body end -->
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Errors in Uploaded Data</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <table id="errorTable" class="datatable table table-striped">
                    <thead>
                        <tr>
                            <th>Row</th>
                            <th>Error Type</th>
                            <th>Description</th>

                        </tr>
                    </thead>
                    <tbody>
                        <!-- Error rows will be dynamically added here -->
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default waves-effect " data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<div class="loader-block" id="loader-block">
    <div class="preloader6">
        <hr>
    </div>
</div>
<div class="overlay" id="overlay"></div>
<script>
        document.addEventListener("DOMContentLoaded", function () {
            const hasErrors = '@Session["HasErrors"]' === 'True';
            if (hasErrors) {
                const errorData = JSON.parse('@Html.Raw(Session["ExcelErrors"])');
                const errorTable = document.getElementById("errorTable").querySelector("tbody");

                // Populate the table with error data
                errorData.forEach(error => {
                    const row = errorTable.insertRow();
                    const affectedRowCell = row.insertCell(0);
                    const errorTypeCell = row.insertCell(1);
                    const descriptionCell = row.insertCell(2);



                    affectedRowCell.textContent = error.AffectedRow;
                    errorTypeCell.textContent = error.ErrorType;
                    descriptionCell.textContent = error.Description;

                });

                // Show the modal
                const modal = new bootstrap.Modal(document.getElementById("exampleModal"));
                modal.show();
            }
        });
</script>
<script>

    function initAutocomplete() {
        // Initialize the map
        const map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: -33.8688, lng: 151.2195 }, // Default to Sydney
            zoom: 13,
            mapTypeId: "roadmap",
        });

        // Initialize the Autocomplete on the input element
        const input = document.getElementById("pac-input");
        const autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo("bounds", map);

        // Marker to indicate selected location on the map
        const marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29),
        });

        // Listen for place selection on the Autocomplete input
        autocomplete.addListener("place_changed", () => {
            marker.setVisible(false); // Hide marker initially
            const place = autocomplete.getPlace();

            if (!place.geometry || !place.geometry.location) {
                console.log("No details available for input: '" + place.name + "'");
                return;
            }

            // Recenter the map and place the marker on selected location
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17); // Zoom in if viewport not available
            }

            // Set marker properties
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            // Get the formatted address and set it into the input field
            const formattedAddress = place.formatted_address;

            // Set the formatted address into the input
            document.getElementById("pac-input").value = formattedAddress;
        });
    }
    // Load the Google Maps API script with callback to initAutocomplete
</script>
<script async
        defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBrbWFXlOYpaq51wteSyFS2UjdMPOWBlQw&callback=initMap&libraries=places&callback=initAutocomplete">

</script>
<script>
    document.addEventListener("DOMContentLoaded", function (event) {
        //Get Zone
        $("#Company_Id").change(function () {
            var id = $(this).val();
            $.get('/Common/GetCompanyZonesByID?Customer_Id=' + id, function (r) {
                var dd = $("#CompanyZoneId");
                dd.empty();
                dd.append('<option value="">Select Company Zone</option>');
                $.each(r, function (k, v) {
                    dd.append('<option value="' + v.Id + '">' + v.CompanyZone1 + '</option>');

                })
            })
        });

        $(document).ready(function () {
            var id = $("#Company_Id").val();
            $.get('/Common/GetCompanyZonesByID?Customer_Id=' + id, function (r) {
                var dd = $("#CompanyZoneId");
                dd.empty();
                dd.append('<option value="">Select Company Zone</option>');
                $.each(r, function (k, v) {
                    dd.append('<option value="' + v.Id + '">' + v.CompanyZone1 + '</option>');

                })
                $("#CompanyZoneId").val($("#CompanyZoneIdHidden").val());
            })
        });
    });
</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    $(document).ready(function () {
        $(document).on("click", "#BtnImport", function () {
            document.getElementById('loader-block').style.display = 'block';
            document.getElementById('overlay').style.display = 'block';
            document.getElementById('pcoded-content').classList.add('blurred');
        })
        document.getElementById('loader-block').style.display = 'none';
        document.getElementById('overlay').style.display = 'none';
        document.getElementById('pcoded-content').classList.remove('blurred');
    });
</script>