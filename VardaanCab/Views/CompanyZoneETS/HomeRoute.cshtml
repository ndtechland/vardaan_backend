@model VardaanCab.Domain.DTO.EmployeeHomeRouteDTO
@{
    ViewBag.Title = "HomeRoute";
    Layout = "~/Views/Shared/New_Master/_FinelAdminLayout.cshtml";
}
<style>
    /*
    * Always set the map height explicitly to define the size of the div element
    * that contains the map.
    */
    #map {
        height: 300px;
        width: 100%;
    }


    /*
    * Optional: Makes the sample page fill the window.
    */
    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    #infowindow-content {
        display: none;
    }

    #map #infowindow-content {
        display: inline;
    }

    .pac-card {
        background-color: #fff;
        border: 0;
        border-radius: 2px;
        box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
        margin: 10px;
        padding: 0 0.5em;
        font: 400 18px Roboto, Arial, sans-serif;
        overflow: hidden;
        font-family: Roboto;
        padding: 0;
    }

    #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
    }

    .pac-controls {
        display: inline-block;
        padding: 5px 11px;
    }

        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        /*margin-left: 12px;*/
        /* padding: 0 11px 0 13px;*/
        text-overflow: ellipsis;
        /*width: 400px;*/
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }

    #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
    }

    #target {
        width: 345px;
    }
</style>
<div class="pcoded-content">
    <!-- Page-header end -->
    <div class="pcoded-inner-content">
        <!-- Main-body start -->
        <div class="main-body">
            <div class="page-wrapper">
                <div class="card bread">
                    <div class="card-body">
                        <h5>@ViewBag.Heading</h5>
                        <div class="page-header-breadcrumb">
                            <ul class="breadcrumb">
                                <li class="breadcrumb-item">
                                    <a href="#!">
                                        <i class="fa fa-home"></i>
                                    </a>
                                </li>
                                <li class="breadcrumb-item">
                                    <a href="#!">Master Enteries</a>
                                </li>
                                <li class="breadcrumb-item">
                                    <a href="#!">Add Home Routes</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
                <!-- Page body start -->
                <div class="page-body">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <!-- Heading -->
                                    <h5>@ViewBag.Heading</h5>

                                    <!-- Import and Export Section -->
                                    <div class="d-flex align-items-center">
                                        <a href="/CompanyZoneETS/AllHomeRoute?menuId=@ViewBag.menuId" class="btn btn-primary btn-sm">
                                            Show All
                                        </a>
                                    </div>
                                </div>
                                <div class="card-block">
                                    <form class="theme-form mega-form" action="HomeRoute" method="post" enctype="multipart/form-data">
                                        
                                            <input name="MenuId" type="hidden" value="@ViewBag.menuId" />
                                            <input name="Id" type="hidden" value="@Model.Id" />
                                            @if (TempData["msg"] != null)
                                            {
                                                <div class="mb-3">
                                                    <div class="alert alert-info">
                                                        @TempData["msg"]
                                                    </div>
                                                </div>
                                            }

                                            <div class="mb-3">
                                                <label for="menu-type" class="form-label-title ">
                                                    Select Zone<span class="text-danger">*</span>
                                                </label>
                                                @Html.DropDownListFor(a => a.CompanyZoneId, Model.CompanyZones, "Select Company Zone", new { @class = "form-control", @required = "required" })
                                                <span class="text-danger">
                                                    @Html.ValidationMessageFor(a => a.CompanyZoneId)
                                                </span>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label-title">Home Route Name<span class="text-danger">*</span></label>
                                                @Html.TextBoxFor(model => model.HomeRouteName, new { @class = "form-control", id = "pac-input", placeholder = "Enter a location" })
                                                <span class="text-danger">
                                                    @Html.ValidationMessageFor(model => model.HomeRouteName)
                                                </span>
                                            </div>
                                            <!--Map-->
                                            <div class="row" style="display:none;">
                                                <div class="row gx-3 mb-3">
                                                    <div class="col-md-12">
                                                        <div id="map"></div>
                                                    </div>
                                                </div>
                                            </div>
                                        <div class="card-footer text-end">
                                            <button type="submit" class="btn btn-primary me-3">@ViewBag.BtnTXT</button>
                                            <a href="/CompanyZoneETS/AllHomeRoute?menuId=@ViewBag.menuId" class="btn btn-outline-primary">Cancel</a>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
                <!-- Page body end -->
            </div>
        </div>
    </div>
</div>
 

<script>

    function initAutocomplete() {
        // Initialize the map
        const map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: -33.8688, lng: 151.2195 }, // Default to Sydney
            zoom: 13,
            mapTypeId: "roadmap",
        });

        // Initialize the Autocomplete on the input element
        const input = document.getElementById("pac-input");
        const autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo("bounds", map);

        // Marker to indicate selected location on the map
        const marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29),
        });

        // Listen for place selection on the Autocomplete input
        autocomplete.addListener("place_changed", () => {
            marker.setVisible(false); // Hide marker initially
            const place = autocomplete.getPlace();

            if (!place.geometry || !place.geometry.location) {
                console.log("No details available for input: '" + place.name + "'");
                return;
            }

            // Recenter the map and place the marker on selected location
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17); // Zoom in if viewport not available
            }

            // Set marker properties
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            // Get the formatted address and set it into the input field
            const formattedAddress = place.formatted_address;

            // Set the formatted address into the input
            document.getElementById("pac-input").value = formattedAddress;
        });
    }
    // Load the Google Maps API script with callback to initAutocomplete
</script>
<script async
        defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBrbWFXlOYpaq51wteSyFS2UjdMPOWBlQw&callback=initMap&libraries=places&callback=initAutocomplete">

</script>